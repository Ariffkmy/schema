-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."administration$account"
(
    id bigint NOT NULL,
    fullname character varying(200) COLLATE pg_catalog."default",
    email character varying(200) COLLATE pg_catalog."default",
    islocaluser boolean,
    CONSTRAINT "administration$account_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanageme$conditionreport_account_responsiblepers"
(
    "conditionreportmanagement$conditionreportid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanageme$conditionreport_account_responsibl_pkey" PRIMARY KEY ("conditionreportmanagement$conditionreportid", "administration$accountid"),
    CONSTRAINT "uniq_conditionrep$conditio_acco_responsi_conditionrep$condition" UNIQUE ("conditionreportmanagement$conditionreportid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagemen$conditioninfo_account_responsibleperso"
(
    "conditionreportmanagement$conditioninfoid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagemen$conditioninfo_account_responsible_pkey" PRIMARY KEY ("conditionreportmanagement$conditioninfoid", "administration$accountid"),
    CONSTRAINT "uniq_conditionrep$conditi_acco_responsib_conditionrepo$conditio" UNIQUE ("conditionreportmanagement$conditioninfoid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$conditioninfo"
(
    id bigint NOT NULL,
    _linenumber integer,
    item character varying(200) COLLATE pg_catalog."default",
    detailsoffaults character varying(2000) COLLATE pg_catalog."default",
    detailsofdeferred character varying(2000) COLLATE pg_catalog."default",
    faultgrade character varying(2) COLLATE pg_catalog."default",
    initials character varying(200) COLLATE pg_catalog."default",
    deferreduntil timestamp without time zone,
    isincident character varying(3) COLLATE pg_catalog."default",
    istaskcreated boolean,
    _filedata text COLLATE pg_catalog."default",
    filecount integer,
    status character varying(26) COLLATE pg_catalog."default",
    workshop character varying(26) COLLATE pg_catalog."default",
    reviewdate timestamp without time zone,
    isconfirmedbyresponsibleperson boolean,
    isenterunibis boolean,
    rejectreasonremarks character varying(200) COLLATE pg_catalog."default",
    planneddate timestamp without time zone,
    approvedate timestamp without time zone,
    rejectdate timestamp without time zone,
    detailsoffaultschanged character varying(200) COLLATE pg_catalog."default",
    faultgradechanged character varying(2) COLLATE pg_catalog."default",
    planneddatechanged timestamp without time zone,
    isincidentchanged character varying(3) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    CONSTRAINT "conditionreportmanagement$conditioninfo_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$conditioninfo_account_rejectedby"
(
    "conditionreportmanagement$conditioninfoid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$conditioninfo_account_rejectedby_pkey" PRIMARY KEY ("conditionreportmanagement$conditioninfoid", "administration$accountid"),
    CONSTRAINT "uniq_conditionrepo$conditio_acco_reject_conditionrepo$condition" UNIQUE ("conditionreportmanagement$conditioninfoid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$conditioninfo_account_reportedby"
(
    "conditionreportmanagement$conditioninfoid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$conditioninfo_account_reportedby_pkey" PRIMARY KEY ("conditionreportmanagement$conditioninfoid", "administration$accountid"),
    CONSTRAINT "uniq_conditionrepo$conditio_acco_report_conditionrepo$conditio2" UNIQUE ("conditionreportmanagement$conditioninfoid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$conditioninfo_conditionreport"
(
    "conditionreportmanagement$conditioninfoid" bigint NOT NULL,
    "conditionreportmanagement$conditionreportid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$conditioninfo_conditionreport_pkey" PRIMARY KEY ("conditionreportmanagement$conditioninfoid", "conditionreportmanagement$conditionreportid"),
    CONSTRAINT "uniq_conditionrepor$conditio_condition_conditionrepor$condition" UNIQUE ("conditionreportmanagement$conditioninfoid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$conditionreport"
(
    id bigint NOT NULL,
    _number integer,
    crnumber character varying(200) COLLATE pg_catalog."default",
    date timestamp without time zone,
    reviewdate timestamp without time zone,
    equipmentcondition character varying(200) COLLATE pg_catalog."default",
    isconfirmedbyresponsibleperson boolean,
    status character varying(26) COLLATE pg_catalog."default",
    reporttype character varying(3) COLLATE pg_catalog."default",
    workorderno character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "conditionreportmanagement$conditionreport_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$conditionreport_account_reportedby"
(
    "conditionreportmanagement$conditionreportid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$conditionreport_account_reported_pkey" PRIMARY KEY ("conditionreportmanagement$conditionreportid", "administration$accountid"),
    CONSTRAINT "uniq_conditionrepo$conditio_acco_report_conditionrepo$condition" UNIQUE ("conditionreportmanagement$conditionreportid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$conditionreport_asset"
(
    "conditionreportmanagement$conditionreportid" bigint NOT NULL,
    "fleet$assetid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$conditionreport_asset_pkey" PRIMARY KEY ("conditionreportmanagement$conditionreportid", "fleet$assetid"),
    CONSTRAINT "uniq_conditionreport$conditionr_asse_conditionreport$conditionr" UNIQUE ("conditionreportmanagement$conditionreportid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$conditionreport_exceldocument"
(
    "conditionreportmanagement$conditionreportid" bigint NOT NULL,
    "conditionreportmanagement$exceldocumentid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$conditionreport_exceldocument_pkey" PRIMARY KEY ("conditionreportmanagement$conditionreportid", "conditionreportmanagement$exceldocumentid"),
    CONSTRAINT "uniq_conditionrepor$condition_exceldoc_conditionrepor$condition" UNIQUE ("conditionreportmanagement$conditionreportid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$emaillogs"
(
    id bigint NOT NULL,
    sender character varying(200) COLLATE pg_catalog."default",
    recipient character varying(200) COLLATE pg_catalog."default",
    sentdate timestamp without time zone,
    emailbody character varying(200) COLLATE pg_catalog."default",
    isemailsent boolean,
    CONSTRAINT "conditionreportmanagement$emaillogs_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$emaillogs_conditioninfo"
(
    "conditionreportmanagement$emaillogsid" bigint NOT NULL,
    "conditionreportmanagement$conditioninfoid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$emaillogs_conditioninfo_pkey" PRIMARY KEY ("conditionreportmanagement$emaillogsid", "conditionreportmanagement$conditioninfoid"),
    CONSTRAINT "uniq_conditionreport$emaill_condition_conditionreport$condition" UNIQUE ("conditionreportmanagement$conditioninfoid"),
    CONSTRAINT "uniq_conditionreportm$emaill_conditio_conditionreportm$emaillog" UNIQUE ("conditionreportmanagement$emaillogsid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$emaillogs_conditionreport"
(
    "conditionreportmanagement$emaillogsid" bigint NOT NULL,
    "conditionreportmanagement$conditionreportid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$emaillogs_conditionreport_pkey" PRIMARY KEY ("conditionreportmanagement$emaillogsid", "conditionreportmanagement$conditionreportid"),
    CONSTRAINT "uniq_conditionrepor$emaill_condition_conditionrepor$conditionre" UNIQUE ("conditionreportmanagement$conditionreportid"),
    CONSTRAINT "uniq_conditionreport$emaill_conditionr_conditionreportm$emaillo" UNIQUE ("conditionreportmanagement$emaillogsid")
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$exceldocument"
(
    id bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$exceldocument_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$reportpdf"
(
    id bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$reportpdf_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."conditionreportmanagement$reportpdf_conditionreport"
(
    "conditionreportmanagement$reportpdfid" bigint NOT NULL,
    "conditionreportmanagement$conditionreportid" bigint NOT NULL,
    CONSTRAINT "conditionreportmanagement$reportpdf_conditionreport_pkey" PRIMARY KEY ("conditionreportmanagement$reportpdfid", "conditionreportmanagement$conditionreportid"),
    CONSTRAINT "uniq_conditionreport$report_conditionr_conditionreportm$reportp" UNIQUE ("conditionreportmanagement$reportpdfid")
);

CREATE TABLE IF NOT EXISTS public."databasescrambler$scrambler"
(
    id bigint NOT NULL,
    scramblerid bigint,
    lastscrambledat timestamp without time zone,
    CONSTRAINT "databasescrambler$scrambler_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."databasescrambler$scrambler_mxobjectmember"
(
    "databasescrambler$scramblerid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "databasescrambler$scrambler_mxobjectmember_pkey" PRIMARY KEY ("databasescrambler$scramblerid", "mxmodelreflection$mxobjectmemberid")
);

CREATE TABLE IF NOT EXISTS public."databasescrambler$scrambler_mxobjecttype"
(
    "databasescrambler$scramblerid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "databasescrambler$scrambler_mxobjecttype_pkey" PRIMARY KEY ("databasescrambler$scramblerid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_databasescram$scramble_mxobjectty_databasescram$scrambleri" UNIQUE ("databasescrambler$scramblerid")
);

CREATE TABLE IF NOT EXISTS public."dataintegrity$objectsignature"
(
    id bigint NOT NULL,
    entitycompletename character varying(200) COLLATE pg_catalog."default",
    entityname character varying(200) COLLATE pg_catalog."default",
    objectid bigint,
    readableid character varying(200) COLLATE pg_catalog."default",
    signaturehash character varying(200) COLLATE pg_catalog."default",
    jsonobject text COLLATE pg_catalog."default",
    lastcheckedat timestamp without time zone,
    lastchangedat timestamp without time zone,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "dataintegrity$objectsignature_pkey" PRIMARY KEY (id),
    CONSTRAINT "uniq_dataintegrity$objectsignature_objectid" UNIQUE (objectid)
);

CREATE TABLE IF NOT EXISTS public."dataintegrity$signaturehistory"
(
    id bigint NOT NULL,
    objectid bigint,
    hash character varying(200) COLLATE pg_catalog."default",
    jsonobject text COLLATE pg_catalog."default",
    checkedat timestamp without time zone,
    ischanged boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "dataintegrity$signaturehistory_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."dataintegrity$signaturehistory_objectsignature"
(
    "dataintegrity$signaturehistoryid" bigint NOT NULL,
    "dataintegrity$objectsignatureid" bigint NOT NULL,
    CONSTRAINT "dataintegrity$signaturehistory_objectsignature_pkey" PRIMARY KEY ("dataintegrity$signaturehistoryid", "dataintegrity$objectsignatureid"),
    CONSTRAINT "uniq_dataintegr$signaturehi_objectsigna_dataintegr$signaturehis" UNIQUE ("dataintegrity$signaturehistoryid")
);

CREATE TABLE IF NOT EXISTS public."datawidgetsextension$columnconfig"
(
    id bigint NOT NULL,
    columnid text COLLATE pg_catalog."default",
    title text COLLATE pg_catalog."default",
    CONSTRAINT "datawidgetsextension$columnconfig_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."datawidgetsextension$columnconfig_datagridconfig"
(
    "datawidgetsextension$columnconfigid" bigint NOT NULL,
    "datawidgetsextension$datagridconfigid" bigint NOT NULL,
    CONSTRAINT "datawidgetsextension$columnconfig_datagridconfig_pkey" PRIMARY KEY ("datawidgetsextension$columnconfigid", "datawidgetsextension$datagridconfigid"),
    CONSTRAINT "uniq_datawidgetsex$columncon_datagridc_datawidgetsex$columnconf" UNIQUE ("datawidgetsextension$columnconfigid")
);

CREATE TABLE IF NOT EXISTS public."datawidgetsextension$datagridconfig"
(
    id bigint NOT NULL,
    name text COLLATE pg_catalog."default",
    schemaversion integer,
    settinghash integer,
    configjson text COLLATE pg_catalog."default",
    CONSTRAINT "datawidgetsextension$datagridconfig_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."datawidgetsextension$datagridconfig_account"
(
    "datawidgetsextension$datagridconfigid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "datawidgetsextension$datagridconfig_account_pkey" PRIMARY KEY ("datawidgetsextension$datagridconfigid", "administration$accountid"),
    CONSTRAINT "uniq_datawidgetsext$datagridco_accou_datawidgetsext$datagridcon" UNIQUE ("datawidgetsextension$datagridconfigid")
);

CREATE TABLE IF NOT EXISTS public."datawidgetsextension$servicereportcolumns"
(
    id bigint NOT NULL,
    title character varying(200) COLLATE pg_catalog."default",
    columnid character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "datawidgetsextension$servicereportcolumns_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."datawidgetsextension$servicereportdatagridconfig"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    hash character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "datawidgetsextension$servicereportdatagridconfig_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."deeplink$attribute"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "deeplink$attribute_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."deeplink$attribute_entity"
(
    "deeplink$attributeid" bigint NOT NULL,
    "deeplink$entityid" bigint NOT NULL,
    CONSTRAINT "deeplink$attribute_entity_pkey" PRIMARY KEY ("deeplink$attributeid", "deeplink$entityid"),
    CONSTRAINT "uniq_deeplink$attribute_entity_deeplink$attributeid" UNIQUE ("deeplink$attributeid")
);

CREATE TABLE IF NOT EXISTS public."deeplink$deeplink"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    microflow character varying(200) COLLATE pg_catalog."default",
    objecttype character varying(200) COLLATE pg_catalog."default",
    objectattribute character varying(200) COLLATE pg_catalog."default",
    allowguests boolean,
    usestringargument boolean,
    separategetparameters boolean,
    useashome boolean,
    indexpage character varying(100) COLLATE pg_catalog."default",
    hitcount integer,
    argumentexample character varying(600) COLLATE pg_catalog."default",
    useobjectargument boolean,
    trackhitcount boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "deeplink$deeplink_pkey" PRIMARY KEY (id),
    CONSTRAINT "uniq_deeplink$deeplink_name" UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public."deeplink$deeplink_attribute"
(
    "deeplink$deeplinkid" bigint NOT NULL,
    "deeplink$attributeid" bigint NOT NULL,
    CONSTRAINT "deeplink$deeplink_attribute_pkey" PRIMARY KEY ("deeplink$deeplinkid", "deeplink$attributeid"),
    CONSTRAINT "uniq_deeplink$deeplink_attribute_deeplink$deeplinkid" UNIQUE ("deeplink$deeplinkid")
);

CREATE TABLE IF NOT EXISTS public."deeplink$deeplink_entity"
(
    "deeplink$deeplinkid" bigint NOT NULL,
    "deeplink$entityid" bigint NOT NULL,
    CONSTRAINT "deeplink$deeplink_entity_pkey" PRIMARY KEY ("deeplink$deeplinkid", "deeplink$entityid"),
    CONSTRAINT "uniq_deeplink$deeplink_entity_deeplink$deeplinkid" UNIQUE ("deeplink$deeplinkid")
);

CREATE TABLE IF NOT EXISTS public."deeplink$deeplink_language"
(
    "deeplink$deeplinkid" bigint NOT NULL,
    "system$languageid" bigint NOT NULL,
    CONSTRAINT "deeplink$deeplink_language_pkey" PRIMARY KEY ("deeplink$deeplinkid", "system$languageid"),
    CONSTRAINT "uniq_deeplink$deeplink_language_deeplink$deeplinkid" UNIQUE ("deeplink$deeplinkid")
);

CREATE TABLE IF NOT EXISTS public."deeplink$deeplink_microflow"
(
    "deeplink$deeplinkid" bigint NOT NULL,
    "deeplink$microflowid" bigint NOT NULL,
    CONSTRAINT "deeplink$deeplink_microflow_pkey" PRIMARY KEY ("deeplink$deeplinkid", "deeplink$microflowid"),
    CONSTRAINT "uniq_deeplink$deeplink_microflow_deeplink$deeplinkid" UNIQUE ("deeplink$deeplinkid")
);

CREATE TABLE IF NOT EXISTS public."deeplink$entity"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "deeplink$entity_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."deeplink$microflow"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    friendlyname character varying(200) COLLATE pg_catalog."default",
    usestringarg boolean,
    useobjectargument boolean,
    module character varying(200) COLLATE pg_catalog."default",
    parameters text COLLATE pg_catalog."default",
    nrofparameters integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "deeplink$microflow_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."deeplink$param"
(
    "deeplink$microflowid" bigint NOT NULL,
    "deeplink$entityid" bigint NOT NULL,
    CONSTRAINT "deeplink$param_pkey" PRIMARY KEY ("deeplink$microflowid", "deeplink$entityid"),
    CONSTRAINT "uniq_deeplink$param_deeplink$microflowid" UNIQUE ("deeplink$microflowid")
);

CREATE TABLE IF NOT EXISTS public."deeplink$pendinglink"
(
    id bigint NOT NULL,
    "user" character varying(200) COLLATE pg_catalog."default",
    argument bigint,
    stringargument text COLLATE pg_catalog."default",
    sessionid character varying(50) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "deeplink$pendinglink_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."deeplink$pendinglink_deeplink"
(
    "deeplink$pendinglinkid" bigint NOT NULL,
    "deeplink$deeplinkid" bigint NOT NULL,
    CONSTRAINT "deeplink$pendinglink_deeplink_pkey" PRIMARY KEY ("deeplink$pendinglinkid", "deeplink$deeplinkid"),
    CONSTRAINT "uniq_deeplink$pendinglink_deeplink_deeplink$pendinglinkid" UNIQUE ("deeplink$pendinglinkid")
);

CREATE TABLE IF NOT EXISTS public."documentgeneration$configuration"
(
    id bigint NOT NULL,
    deploymenttype character varying(20) COLLATE pg_catalog."default",
    registrationstatus character varying(12) COLLATE pg_catalog."default",
    applicationurl character varying(200) COLLATE pg_catalog."default",
    accesstoken text COLLATE pg_catalog."default",
    accesstokenexpirationdate timestamp without time zone,
    refreshtoken text COLLATE pg_catalog."default",
    verificationtoken character varying(200) COLLATE pg_catalog."default",
    verificationtokenexpirationdate timestamp without time zone,
    CONSTRAINT "documentgeneration$configuration_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."documentgeneration$documentrequest"
(
    id bigint NOT NULL,
    requestid character varying(200) COLLATE pg_catalog."default",
    status character varying(9) COLLATE pg_catalog."default",
    filename character varying(200) COLLATE pg_catalog."default",
    resultentity character varying(200) COLLATE pg_catalog."default",
    microflowname character varying(200) COLLATE pg_catalog."default",
    contextobjectguid bigint,
    securitytoken character varying(200) COLLATE pg_catalog."default",
    expirationdate timestamp without time zone,
    errorcode character varying(50) COLLATE pg_catalog."default",
    errormessage character varying(500) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "documentgeneration$documentrequest_pkey" PRIMARY KEY (id),
    CONSTRAINT "uniq_documentgeneration$documentrequest_requestid" UNIQUE (requestid)
);

CREATE TABLE IF NOT EXISTS public."documentgeneration$documentrequest_documentuser"
(
    "documentgeneration$documentrequestid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "documentgeneration$documentrequest_documentuser_pkey" PRIMARY KEY ("documentgeneration$documentrequestid", "system$userid"),
    CONSTRAINT "uniq_documentgene$documentre_documentu_documentgene$documentreq" UNIQUE ("documentgeneration$documentrequestid")
);

CREATE TABLE IF NOT EXISTS public."documentgeneration$documentrequest_filedocument"
(
    "documentgeneration$documentrequestid" bigint NOT NULL,
    "system$filedocumentid" bigint NOT NULL,
    CONSTRAINT "documentgeneration$documentrequest_filedocument_pkey" PRIMARY KEY ("documentgeneration$documentrequestid", "system$filedocumentid"),
    CONSTRAINT "uniq_documentgene$documentre_filedocum_documentgene$documentreq" UNIQUE ("documentgeneration$documentrequestid")
);

CREATE TABLE IF NOT EXISTS public."documentgeneration$documentrequest_session"
(
    "documentgeneration$documentrequestid" bigint NOT NULL,
    "system$sessionid" bigint NOT NULL,
    CONSTRAINT "documentgeneration$documentrequest_session_pkey" PRIMARY KEY ("documentgeneration$documentrequestid", "system$sessionid"),
    CONSTRAINT "uniq_documentgene$documentreq_sessio_documentgene$documentreque" UNIQUE ("documentgeneration$documentrequestid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$attachment"
(
    id bigint NOT NULL,
    contentid text COLLATE pg_catalog."default",
    attachmentname text COLLATE pg_catalog."default",
    attachmentsize integer,
    attachmentcontenttype text COLLATE pg_catalog."default",
    "position" character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT "email_connector$attachment_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$attachment_emailmessage"
(
    "email_connector$attachmentid" bigint NOT NULL,
    "email_connector$emailmessageid" bigint NOT NULL,
    CONSTRAINT "email_connector$attachment_emailmessage_pkey" PRIMARY KEY ("email_connector$attachmentid", "email_connector$emailmessageid"),
    CONSTRAINT "uniq_email_connect$attachme_emailmessa_email_connect$attachment" UNIQUE ("email_connector$attachmentid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$attachment_emailtemplate"
(
    "email_connector$attachmentid" bigint NOT NULL,
    "email_connector$emailtemplateid" bigint NOT NULL,
    CONSTRAINT "email_connector$attachment_emailtemplate_pkey" PRIMARY KEY ("email_connector$attachmentid", "email_connector$emailtemplateid"),
    CONSTRAINT "uniq_email_connect$attachme_emailtempl_email_connecto$attachmen" UNIQUE ("email_connector$attachmentid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailaccount"
(
    id bigint NOT NULL,
    username text COLLATE pg_catalog."default",
    mailaddress text COLLATE pg_catalog."default",
    password text COLLATE pg_catalog."default",
    timeout integer,
    sanitizeemailbodyforxssscript boolean,
    isp12configured boolean,
    isldapconfigured boolean,
    isincomingemailconfigured boolean,
    isoutgoingemailconfigured boolean,
    fromdisplayname text COLLATE pg_catalog."default",
    usesslcheckserveridentity boolean,
    issharedmailbox boolean,
    isoauthused boolean,
    isemailconfigautodetect boolean,
    composeemail boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "email_connector$emailaccount_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailaccount_ldapconfiguration"
(
    "email_connector$emailaccountid" bigint NOT NULL,
    "email_connector$ldapconfigurationid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailaccount_ldapconfiguration_pkey" PRIMARY KEY ("email_connector$emailaccountid", "email_connector$ldapconfigurationid"),
    CONSTRAINT "uniq_emai_connec$emailacc_ldapconfigu_emai_connec$ldapconfigura" UNIQUE ("email_connector$ldapconfigurationid"),
    CONSTRAINT "uniq_emai_connect$emailacc_ldapconfigur_emai_connect$emailaccou" UNIQUE ("email_connector$emailaccountid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailaccount_oauthprovider"
(
    "email_connector$emailaccountid" bigint NOT NULL,
    "email_connector$oauthproviderid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailaccount_oauthprovider_pkey" PRIMARY KEY ("email_connector$emailaccountid", "email_connector$oauthproviderid"),
    CONSTRAINT "uniq_emai_connect$emailaccou_oauthprovi_emai_connect$emailaccou" UNIQUE ("email_connector$emailaccountid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailaccount_oauthtoken"
(
    "email_connector$emailaccountid" bigint NOT NULL,
    "email_connector$oauthtokenid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailaccount_oauthtoken_pkey" PRIMARY KEY ("email_connector$emailaccountid", "email_connector$oauthtokenid"),
    CONSTRAINT "uniq_email_connect$emailacco_oauthtok_email_connect$emailaccoun" UNIQUE ("email_connector$emailaccountid"),
    CONSTRAINT "uniq_email_connect$emailaccou_oauthtok_email_connect$oauthtoken" UNIQUE ("email_connector$oauthtokenid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailconnectorlog"
(
    id bigint NOT NULL,
    created timestamp without time zone,
    logtype character varying(7) COLLATE pg_catalog."default",
    errormessage text COLLATE pg_catalog."default",
    triggeredinmf text COLLATE pg_catalog."default",
    stacktrace text COLLATE pg_catalog."default",
    message text COLLATE pg_catalog."default",
    isunread boolean,
    CONSTRAINT "email_connector$emailconnectorlog_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailconnectorlog_emailaccount"
(
    "email_connector$emailconnectorlogid" bigint NOT NULL,
    "email_connector$emailaccountid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailconnectorlog_emailaccount_pkey" PRIMARY KEY ("email_connector$emailconnectorlogid", "email_connector$emailaccountid"),
    CONSTRAINT "uniq_emai_connec$emailconnec_emailacc_emai_connec$emailconnecto" UNIQUE ("email_connector$emailconnectorlogid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailconnectorlog_emailmessage"
(
    "email_connector$emailconnectorlogid" bigint NOT NULL,
    "email_connector$emailmessageid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailconnectorlog_emailmessage_pkey" PRIMARY KEY ("email_connector$emailconnectorlogid", "email_connector$emailmessageid"),
    CONSTRAINT "uniq_emai_connec$emailconnec_emailmes_emai_connec$emailconnecto" UNIQUE ("email_connector$emailconnectorlogid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailheader"
(
    id bigint NOT NULL,
    key text COLLATE pg_catalog."default",
    value text COLLATE pg_catalog."default",
    CONSTRAINT "email_connector$emailheader_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailheader_emailmessage"
(
    "email_connector$emailheaderid" bigint NOT NULL,
    "email_connector$emailmessageid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailheader_emailmessage_pkey" PRIMARY KEY ("email_connector$emailheaderid", "email_connector$emailmessageid"),
    CONSTRAINT "uniq_email_connect$emailhea_emailmess_email_connecto$emailheade" UNIQUE ("email_connector$emailheaderid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailmessage"
(
    id bigint NOT NULL,
    subject text COLLATE pg_catalog."default",
    sentdate timestamp without time zone,
    retrievedate timestamp without time zone,
    "from" text COLLATE pg_catalog."default",
    "to" text COLLATE pg_catalog."default",
    cc text COLLATE pg_catalog."default",
    bcc text COLLATE pg_catalog."default",
    content text COLLATE pg_catalog."default",
    useonlyplaintext boolean,
    hasattachments boolean,
    size integer,
    fromdisplayname text COLLATE pg_catalog."default",
    replyto text COLLATE pg_catalog."default",
    plainbody text COLLATE pg_catalog."default",
    queuedforsending boolean,
    resendattempts integer,
    lastsenderror text COLLATE pg_catalog."default",
    lastsendattemptat timestamp without time zone,
    status character varying(8) COLLATE pg_catalog."default",
    issigned boolean,
    isencrypted boolean,
    recipientstoggle boolean,
    "system$owner" bigint,
    CONSTRAINT "email_connector$emailmessage_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailmessage_emailaccount"
(
    "email_connector$emailmessageid" bigint NOT NULL,
    "email_connector$emailaccountid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailmessage_emailaccount_pkey" PRIMARY KEY ("email_connector$emailmessageid", "email_connector$emailaccountid"),
    CONSTRAINT "uniq_emai_connect$emailmess_emailacco_emai_connecto$emailmessag" UNIQUE ("email_connector$emailmessageid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailmessage_emailtemplate"
(
    "email_connector$emailmessageid" bigint NOT NULL,
    "email_connector$emailtemplateid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailmessage_emailtemplate_pkey" PRIMARY KEY ("email_connector$emailmessageid", "email_connector$emailtemplateid"),
    CONSTRAINT "uniq_emai_connect$emailmessa_emailtempl_emai_connect$emailmessa" UNIQUE ("email_connector$emailmessageid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailtemplate"
(
    id bigint NOT NULL,
    templatename text COLLATE pg_catalog."default",
    creationdate timestamp without time zone,
    subject text COLLATE pg_catalog."default",
    sentdate timestamp without time zone,
    "to" text COLLATE pg_catalog."default",
    cc text COLLATE pg_catalog."default",
    bcc text COLLATE pg_catalog."default",
    content text COLLATE pg_catalog."default",
    useonlyplaintext boolean,
    hasattachment boolean,
    replyto text COLLATE pg_catalog."default",
    plainbody text COLLATE pg_catalog."default",
    fromdisplayname text COLLATE pg_catalog."default",
    signed boolean,
    encrypted boolean,
    recipientstoggle boolean,
    fromaddress text COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "email_connector$emailtemplate_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailtemplate_mxobjecttype"
(
    "email_connector$emailtemplateid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailtemplate_mxobjecttype_pkey" PRIMARY KEY ("email_connector$emailtemplateid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_emai_connect$emailtemp_mxobjectty_emai_connect$emailtempla" UNIQUE ("email_connector$emailtemplateid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailtemplate_token"
(
    "email_connector$emailtemplateid" bigint NOT NULL,
    "mxmodelreflection$tokenid" bigint NOT NULL,
    CONSTRAINT "email_connector$emailtemplate_token_pkey" PRIMARY KEY ("email_connector$emailtemplateid", "mxmodelreflection$tokenid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$emailtemplateexportfile"
(
    id bigint NOT NULL,
    CONSTRAINT "email_connector$emailtemplateexportfile_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$incomingemailconfiguration"
(
    id bigint NOT NULL,
    incomingprotocol character varying(5) COLLATE pg_catalog."default",
    folder text COLLATE pg_catalog."default",
    usebatchimport boolean,
    batchsize integer,
    handling character varying(13) COLLATE pg_catalog."default",
    movefolder text COLLATE pg_catalog."default",
    processinlineimage boolean,
    fetchstrategy character varying(6) COLLATE pg_catalog."default",
    notifyonnewemails boolean,
    serverhost text COLLATE pg_catalog."default",
    serverport integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "email_connector$incomingemailconfiguration_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$incomingemailconfiguration_emailaccount"
(
    "email_connector$incomingemailconfigurationid" bigint NOT NULL,
    "email_connector$emailaccountid" bigint NOT NULL,
    CONSTRAINT "email_connector$incomingemailconfiguration_emailaccount_pkey" PRIMARY KEY ("email_connector$incomingemailconfigurationid", "email_connector$emailaccountid"),
    CONSTRAINT "uniq_ema_conne$incomingemailc_emailac_ema_conne$incomingemailco" UNIQUE ("email_connector$incomingemailconfigurationid"),
    CONSTRAINT "uniq_emai_connec$incomingemailcon_emailac_emai_connec$emailacco" UNIQUE ("email_connector$emailaccountid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$ldapconfiguration"
(
    id bigint NOT NULL,
    ldaphost text COLLATE pg_catalog."default",
    ldapport integer,
    ldapusername text COLLATE pg_catalog."default",
    ldappassword text COLLATE pg_catalog."default",
    isssl boolean,
    basedn text COLLATE pg_catalog."default",
    authtype character varying(6) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "email_connector$ldapconfiguration_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$oauthnonce"
(
    id bigint NOT NULL,
    state text COLLATE pg_catalog."default",
    CONSTRAINT "email_connector$oauthnonce_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$oauthnonce_emailaccount"
(
    "email_connector$oauthnonceid" bigint NOT NULL,
    "email_connector$emailaccountid" bigint NOT NULL,
    CONSTRAINT "email_connector$oauthnonce_emailaccount_pkey" PRIMARY KEY ("email_connector$oauthnonceid", "email_connector$emailaccountid"),
    CONSTRAINT "uniq_email_connect$oauthnon_emailaccou_email_connect$oauthnonce" UNIQUE ("email_connector$oauthnonceid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$oauthprovider"
(
    id bigint NOT NULL,
    name text COLLATE pg_catalog."default",
    clientid text COLLATE pg_catalog."default",
    clientsecret text COLLATE pg_catalog."default",
    openidwellknownmetadatauri text COLLATE pg_catalog."default",
    authorizationendpoint text COLLATE pg_catalog."default",
    tokenendpoint text COLLATE pg_catalog."default",
    emaildomain text COLLATE pg_catalog."default",
    callbackoperationpath text COLLATE pg_catalog."default",
    callbackurl text COLLATE pg_catalog."default",
    oauthtype character varying(11) COLLATE pg_catalog."default",
    tenantid text COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "email_connector$oauthprovider_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$oauthtoken"
(
    id bigint NOT NULL,
    token_type text COLLATE pg_catalog."default",
    scope text COLLATE pg_catalog."default",
    expires_in integer,
    access_token text COLLATE pg_catalog."default",
    refresh_token text COLLATE pg_catalog."default",
    id_token text COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "email_connector$oauthtoken_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$outgoingemailconfiguration"
(
    id bigint NOT NULL,
    outgoingprotocol character varying(4) COLLATE pg_catalog."default",
    ssl boolean,
    tls boolean,
    sendmaxattempts integer,
    serverhost text COLLATE pg_catalog."default",
    serverport integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "email_connector$outgoingemailconfiguration_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$outgoingemailconfiguration_emailaccount"
(
    "email_connector$outgoingemailconfigurationid" bigint NOT NULL,
    "email_connector$emailaccountid" bigint NOT NULL,
    CONSTRAINT "email_connector$outgoingemailconfiguration_emailaccount_pkey" PRIMARY KEY ("email_connector$outgoingemailconfigurationid", "email_connector$emailaccountid"),
    CONSTRAINT "uniq_ema_conne$outgoingemailc_emailac_ema_conne$outgoingemailco" UNIQUE ("email_connector$outgoingemailconfigurationid"),
    CONSTRAINT "uniq_emai_connec$outgoingemailcon_emailac_emai_connec$emailacco" UNIQUE ("email_connector$emailaccountid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$pk12certificate"
(
    id bigint NOT NULL,
    passphrase text COLLATE pg_catalog."default",
    CONSTRAINT "email_connector$pk12certificate_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$pk12certificate_emailaccount"
(
    "email_connector$pk12certificateid" bigint NOT NULL,
    "email_connector$emailaccountid" bigint NOT NULL,
    CONSTRAINT "email_connector$pk12certificate_emailaccount_pkey" PRIMARY KEY ("email_connector$pk12certificateid", "email_connector$emailaccountid"),
    CONSTRAINT "uniq_emai_connect$pk12certif_emailacc_emai_connect$pk12certific" UNIQUE ("email_connector$pk12certificateid"),
    CONSTRAINT "uniq_emai_connect$pk12certifi_emailacco_emai_connect$emailaccou" UNIQUE ("email_connector$emailaccountid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$querystring"
(
    id bigint NOT NULL,
    param text COLLATE pg_catalog."default",
    CONSTRAINT "email_connector$querystring_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$querystring_oauthprovider"
(
    "email_connector$querystringid" bigint NOT NULL,
    "email_connector$oauthproviderid" bigint NOT NULL,
    CONSTRAINT "email_connector$querystring_oauthprovider_pkey" PRIMARY KEY ("email_connector$querystringid", "email_connector$oauthproviderid"),
    CONSTRAINT "uniq_email_connect$querystr_oauthprovi_email_connect$querystrin" UNIQUE ("email_connector$querystringid")
);

CREATE TABLE IF NOT EXISTS public."email_connector$scopeselected"
(
    id bigint NOT NULL,
    scopestring text COLLATE pg_catalog."default",
    CONSTRAINT "email_connector$scopeselected_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."email_connector$scopeselected_oauthprovider"
(
    "email_connector$scopeselectedid" bigint NOT NULL,
    "email_connector$oauthproviderid" bigint NOT NULL,
    CONSTRAINT "email_connector$scopeselected_oauthprovider_pkey" PRIMARY KEY ("email_connector$scopeselectedid", "email_connector$oauthproviderid"),
    CONSTRAINT "uniq_emai_connect$scopesele_oauthprovi_emai_connect$scopeselect" UNIQUE ("email_connector$scopeselectedid")
);

CREATE TABLE IF NOT EXISTS public."encryption$exampleconfiguration"
(
    id bigint NOT NULL,
    title character varying(200) COLLATE pg_catalog."default",
    username character varying(200) COLLATE pg_catalog."default",
    password character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "encryption$exampleconfiguration_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."encryption$pgpcertificate"
(
    id bigint NOT NULL,
    certificatetype character varying(10) COLLATE pg_catalog."default",
    passphrase_plain character varying(20) COLLATE pg_catalog."default",
    passphrase_encrypted character varying(100) COLLATE pg_catalog."default",
    reference character varying(100) COLLATE pg_catalog."default",
    emailaddress character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT "encryption$pgpcertificate_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."encryption$secretkey_publickey"
(
    "encryption$pgpcertificateid1" bigint NOT NULL,
    "encryption$pgpcertificateid2" bigint NOT NULL,
    CONSTRAINT "encryption$secretkey_publickey_pkey" PRIMARY KEY ("encryption$pgpcertificateid1", "encryption$pgpcertificateid2"),
    CONSTRAINT "uniq_encryption$secretkey_publickey_encryption$pgpcertificateid" UNIQUE ("encryption$pgpcertificateid1")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$additionalpropertie_mxobjectmember_removeindicato"
(
    "excelimporter$additionalpropertiesid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "excelimporter$additionalpropertie_mxobjectmember_removeind_pkey" PRIMARY KEY ("excelimporter$additionalpropertiesid", "mxmodelreflection$mxobjectmemberid"),
    CONSTRAINT "uniq_excelimp$additional_mxobjec_removein_excelimp$additionalpr" UNIQUE ("excelimporter$additionalpropertiesid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$additionalproperties"
(
    id bigint NOT NULL,
    printstatisticsmessages character varying(19) COLLATE pg_catalog."default",
    printnotfoundmessages_mainobject boolean,
    ignoreemptykeys boolean,
    commitunchangedobjects_mainobject boolean,
    removeunsyncedobjects character varying(22) COLLATE pg_catalog."default",
    resetemptyassociations boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "excelimporter$additionalproperties_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column"
(
    id bigint NOT NULL,
    colnumber integer,
    text text COLLATE pg_catalog."default",
    mappingtype character varying(9) COLLATE pg_catalog."default",
    iskey character varying(3) COLLATE pg_catalog."default",
    isreferencekey character varying(26) COLLATE pg_catalog."default",
    status character varying(7) COLLATE pg_catalog."default",
    details character varying(1000) COLLATE pg_catalog."default",
    casesensitive character varying(3) COLLATE pg_catalog."default",
    findattribute character varying(200) COLLATE pg_catalog."default",
    findreference character varying(200) COLLATE pg_catalog."default",
    findobjecttype character varying(200) COLLATE pg_catalog."default",
    findmicroflow character varying(200) COLLATE pg_catalog."default",
    datasource character varying(23) COLLATE pg_catalog."default",
    attributetypeenum character varying(11) COLLATE pg_catalog."default",
    inputmask character varying(20) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "excelimporter$column_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_mastercolumn"
(
    "excelimporter$columnid1" bigint NOT NULL,
    "excelimporter$columnid2" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_mastercolumn_pkey" PRIMARY KEY ("excelimporter$columnid1", "excelimporter$columnid2"),
    CONSTRAINT "uniq_excelimporter$column_mastercolumn_excelimporter$columnid1" UNIQUE ("excelimporter$columnid1")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_microflows"
(
    "excelimporter$columnid" bigint NOT NULL,
    "mxmodelreflection$microflowsid" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_microflows_pkey" PRIMARY KEY ("excelimporter$columnid", "mxmodelreflection$microflowsid"),
    CONSTRAINT "uniq_excelimporter$column_microflows_excelimporter$columnid" UNIQUE ("excelimporter$columnid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_mxobjectmember"
(
    "excelimporter$columnid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_mxobjectmember_pkey" PRIMARY KEY ("excelimporter$columnid", "mxmodelreflection$mxobjectmemberid"),
    CONSTRAINT "uniq_excelimporter$column_mxobjectmember_excelimporter$columnid" UNIQUE ("excelimporter$columnid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_mxobjectmember_reference"
(
    "excelimporter$columnid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_mxobjectmember_reference_pkey" PRIMARY KEY ("excelimporter$columnid", "mxmodelreflection$mxobjectmemberid"),
    CONSTRAINT "uniq_excelimpor$column_mxobjectmem_referenc_excelimport$columni" UNIQUE ("excelimporter$columnid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_mxobjectreference"
(
    "excelimporter$columnid" bigint NOT NULL,
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_mxobjectreference_pkey" PRIMARY KEY ("excelimporter$columnid", "mxmodelreflection$mxobjectreferenceid"),
    CONSTRAINT "uniq_excelimporte$column_mxobjectreferenc_excelimporte$columnid" UNIQUE ("excelimporter$columnid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_mxobjecttype"
(
    "excelimporter$columnid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_mxobjecttype_pkey" PRIMARY KEY ("excelimporter$columnid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_excelimporter$column_mxobjecttype_excelimporter$columnid" UNIQUE ("excelimporter$columnid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_mxobjecttype_reference"
(
    "excelimporter$columnid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_mxobjecttype_reference_pkey" PRIMARY KEY ("excelimporter$columnid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_excelimport$column_mxobjectty_referenc_excelimport$columni" UNIQUE ("excelimporter$columnid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_template"
(
    "excelimporter$columnid" bigint NOT NULL,
    "excelimporter$templateid" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_template_pkey" PRIMARY KEY ("excelimporter$columnid", "excelimporter$templateid"),
    CONSTRAINT "uniq_excelimporter$column_template_excelimporter$columnid" UNIQUE ("excelimporter$columnid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$column_valuetype"
(
    "excelimporter$columnid" bigint NOT NULL,
    "mxmodelreflection$valuetypeid" bigint NOT NULL,
    CONSTRAINT "excelimporter$column_valuetype_pkey" PRIMARY KEY ("excelimporter$columnid", "mxmodelreflection$valuetypeid"),
    CONSTRAINT "uniq_excelimporter$column_valuetype_excelimporter$columnid" UNIQUE ("excelimporter$columnid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$log"
(
    id bigint NOT NULL,
    logline text COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "excelimporter$log_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."excelimporter$log_xmldocumenttemplate"
(
    "excelimporter$logid" bigint NOT NULL,
    "excelimporter$xmldocumenttemplateid" bigint NOT NULL,
    CONSTRAINT "excelimporter$log_xmldocumenttemplate_pkey" PRIMARY KEY ("excelimporter$logid", "excelimporter$xmldocumenttemplateid"),
    CONSTRAINT "uniq_excelimporter$log_xmldocumenttemplate_excelimporter$logid" UNIQUE ("excelimporter$logid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$referencehandling"
(
    id bigint NOT NULL,
    handling character varying(20) COLLATE pg_catalog."default",
    datahandling character varying(9) COLLATE pg_catalog."default",
    printnotfoundmessages boolean,
    commitunchangedobjects boolean,
    ignoreemptykeys boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "excelimporter$referencehandling_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."excelimporter$referencehandling_mxobjectreference"
(
    "excelimporter$referencehandlingid" bigint NOT NULL,
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    CONSTRAINT "excelimporter$referencehandling_mxobjectreference_pkey" PRIMARY KEY ("excelimporter$referencehandlingid", "mxmodelreflection$mxobjectreferenceid"),
    CONSTRAINT "uniq_excelimpo$referencehan_mxobjectrefe_excelimpo$referencehan" UNIQUE ("excelimporter$referencehandlingid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$referencehandling_template"
(
    "excelimporter$referencehandlingid" bigint NOT NULL,
    "excelimporter$templateid" bigint NOT NULL,
    CONSTRAINT "excelimporter$referencehandling_template_pkey" PRIMARY KEY ("excelimporter$referencehandlingid", "excelimporter$templateid"),
    CONSTRAINT "uniq_excelimpor$referencehand_templat_excelimpor$referencehandl" UNIQUE ("excelimporter$referencehandlingid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$template"
(
    id bigint NOT NULL,
    nr bigint,
    title character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    sheetindex integer,
    headerrownumber integer,
    firstdatarownumber integer,
    status character varying(7) COLLATE pg_catalog."default",
    importaction character varying(23) COLLATE pg_catalog."default",
    templatetype character varying(6) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "excelimporter$template_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."excelimporter$template_additionalproperties"
(
    "excelimporter$templateid" bigint NOT NULL,
    "excelimporter$additionalpropertiesid" bigint NOT NULL,
    CONSTRAINT "excelimporter$template_additionalproperties_pkey" PRIMARY KEY ("excelimporter$templateid", "excelimporter$additionalpropertiesid"),
    CONSTRAINT "uniq_excelimpo$templa_additionalprop_excelimpor$additionalprope" UNIQUE ("excelimporter$additionalpropertiesid"),
    CONSTRAINT "uniq_excelimport$templat_additionalproper_excelimport$templatei" UNIQUE ("excelimporter$templateid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$template_mastertemplate"
(
    "excelimporter$templateid1" bigint NOT NULL,
    "excelimporter$templateid2" bigint NOT NULL,
    CONSTRAINT "excelimporter$template_mastertemplate_pkey" PRIMARY KEY ("excelimporter$templateid1", "excelimporter$templateid2"),
    CONSTRAINT "uniq_excelimport$template_mastertempla_excelimporte$templateid1" UNIQUE ("excelimporter$templateid1")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$template_mxobjectreference_parentassociation"
(
    "excelimporter$templateid" bigint NOT NULL,
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    CONSTRAINT "excelimporter$template_mxobjectreference_parentassociation_pkey" PRIMARY KEY ("excelimporter$templateid", "mxmodelreflection$mxobjectreferenceid"),
    CONSTRAINT "uniq_excelimpo$templa_mxobjectref_parentassoc_excelimpo$templat" UNIQUE ("excelimporter$templateid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$template_mxobjecttype"
(
    "excelimporter$templateid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "excelimporter$template_mxobjecttype_pkey" PRIMARY KEY ("excelimporter$templateid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_excelimporte$template_mxobjecttype_excelimporte$templateid" UNIQUE ("excelimporter$templateid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$templatedocument"
(
    id bigint NOT NULL,
    CONSTRAINT "excelimporter$templatedocument_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."excelimporter$templatedocument_template"
(
    "excelimporter$templatedocumentid" bigint NOT NULL,
    "excelimporter$templateid" bigint NOT NULL,
    CONSTRAINT "excelimporter$templatedocument_template_pkey" PRIMARY KEY ("excelimporter$templatedocumentid", "excelimporter$templateid"),
    CONSTRAINT "uniq_excelimpor$templatedocu_templat_excelimport$templatedocume" UNIQUE ("excelimporter$templatedocumentid")
);

CREATE TABLE IF NOT EXISTS public."excelimporter$xmldocumenttemplate"
(
    id bigint NOT NULL,
    CONSTRAINT "excelimporter$xmldocumenttemplate_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."excelimporter$xmldocumenttemplate_template"
(
    "excelimporter$xmldocumenttemplateid" bigint NOT NULL,
    "excelimporter$templateid" bigint NOT NULL,
    CONSTRAINT "excelimporter$xmldocumenttemplate_template_pkey" PRIMARY KEY ("excelimporter$xmldocumenttemplateid", "excelimporter$templateid"),
    CONSTRAINT "uniq_excelimpor$xmldocumentte_templa_excelimpor$xmldocumenttemp" UNIQUE ("excelimporter$xmldocumenttemplateid")
);

CREATE TABLE IF NOT EXISTS public."filedropper$filedroppercontext"
(
    id bigint NOT NULL,
    itemid bigint,
    filecount integer,
    filedata text COLLATE pg_catalog."default",
    CONSTRAINT "filedropper$filedroppercontext_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."filedropper$uploadedfile"
(
    id bigint NOT NULL,
    CONSTRAINT "filedropper$uploadedfile_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."filedropper$uploadedfile_filedroppercontext"
(
    "filedropper$uploadedfileid" bigint NOT NULL,
    "filedropper$filedroppercontextid" bigint NOT NULL,
    CONSTRAINT "filedropper$uploadedfile_filedroppercontext_pkey" PRIMARY KEY ("filedropper$uploadedfileid", "filedropper$filedroppercontextid"),
    CONSTRAINT "uniq_filedroppe$uploadedf_filedroppercon_filedroppe$uploadedfil" UNIQUE ("filedropper$uploadedfileid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset"
(
    id bigint NOT NULL,
    assetid character varying(200) COLLATE pg_catalog."default",
    assetnumber character varying(200) COLLATE pg_catalog."default",
    assetentity character varying(200) COLLATE pg_catalog."default",
    registrationno character varying(200) COLLATE pg_catalog."default",
    registeredstate character varying(200) COLLATE pg_catalog."default",
    country character varying(200) COLLATE pg_catalog."default",
    legacyid character varying(200) COLLATE pg_catalog."default",
    description character varying(200) COLLATE pg_catalog."default",
    makedescription character varying(200) COLLATE pg_catalog."default",
    modeldescription character varying(200) COLLATE pg_catalog."default",
    manufactureddate timestamp without time zone,
    acquireddate timestamp without time zone,
    vinchassisno character varying(200) COLLATE pg_catalog."default",
    engineno character varying(200) COLLATE pg_catalog."default",
    serialnumber character varying(200) COLLATE pg_catalog."default",
    scheduletype character varying(200) COLLATE pg_catalog."default",
    warrantytype character varying(200) COLLATE pg_catalog."default",
    xref character varying(200) COLLATE pg_catalog."default",
    livery character varying(200) COLLATE pg_catalog."default",
    home character varying(200) COLLATE pg_catalog."default",
    ownership character varying(200) COLLATE pg_catalog."default",
    emgroup character varying(200) COLLATE pg_catalog."default",
    custeqid character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "fleet$asset_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_branch"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$branchid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_branch_pkey" PRIMARY KEY ("fleet$assetid", "fleet$branchid"),
    CONSTRAINT "uniq_fleet$asset_branch_fleet$assetid" UNIQUE ("fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_businessunit"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$businessunitid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_businessunit_pkey" PRIMARY KEY ("fleet$assetid", "fleet$businessunitid"),
    CONSTRAINT "uniq_fleet$asset_businessunit_fleet$assetid" UNIQUE ("fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_division"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$divisionid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_division_pkey" PRIMARY KEY ("fleet$assetid", "fleet$divisionid"),
    CONSTRAINT "uniq_fleet$asset_division_fleet$assetid" UNIQUE ("fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_equipmenttype"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$equipmenttypeid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_equipmenttype_pkey" PRIMARY KEY ("fleet$assetid", "fleet$equipmenttypeid"),
    CONSTRAINT "uniq_fleet$asset_equipmenttype_fleet$assetid" UNIQUE ("fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_manufacturer"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$manufacturerid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_manufacturer_pkey" PRIMARY KEY ("fleet$assetid", "fleet$manufacturerid"),
    CONSTRAINT "uniq_fleet$asset_manufacturer_fleet$assetid" UNIQUE ("fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_meter"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$meterid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_meter_pkey" PRIMARY KEY ("fleet$assetid", "fleet$meterid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_operator"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$operatorid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_operator_pkey" PRIMARY KEY ("fleet$assetid", "fleet$operatorid"),
    CONSTRAINT "uniq_fleet$asset_operator_fleet$assetid" UNIQUE ("fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_structure"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$structureid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_structure_pkey" PRIMARY KEY ("fleet$assetid", "fleet$structureid"),
    CONSTRAINT "uniq_fleet$asset_structure_fleet$assetid" UNIQUE ("fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."fleet$asset_subvertical"
(
    "fleet$assetid" bigint NOT NULL,
    "fleet$subverticalid" bigint NOT NULL,
    CONSTRAINT "fleet$asset_subvertical_pkey" PRIMARY KEY ("fleet$assetid", "fleet$subverticalid"),
    CONSTRAINT "uniq_fleet$asset_subvertical_fleet$assetid" UNIQUE ("fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."fleet$branch"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    changeddate timestamp without time zone,
    createddate timestamp without time zone,
    CONSTRAINT "fleet$branch_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$businessunit"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    changeddate timestamp without time zone,
    createddate timestamp without time zone,
    CONSTRAINT "fleet$businessunit_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$division"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    changeddate timestamp without time zone,
    createddate timestamp without time zone,
    CONSTRAINT "fleet$division_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$equipmenttype"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "fleet$equipmenttype_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$jsonfile"
(
    id bigint NOT NULL,
    CONSTRAINT "fleet$jsonfile_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$manufacturer"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "fleet$manufacturer_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$meter"
(
    id bigint NOT NULL,
    metercode character varying(200) COLLATE pg_catalog."default",
    metertype character varying(8) COLLATE pg_catalog."default",
    isdefault boolean,
    CONSTRAINT "fleet$meter_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$meter_unitofmeasurement"
(
    "fleet$meterid" bigint NOT NULL,
    "fleet$unitofmeasurementid" bigint NOT NULL,
    CONSTRAINT "fleet$meter_unitofmeasurement_pkey" PRIMARY KEY ("fleet$meterid", "fleet$unitofmeasurementid"),
    CONSTRAINT "uniq_fleet$meter_unitofmeasurement_fleet$meterid" UNIQUE ("fleet$meterid")
);

CREATE TABLE IF NOT EXISTS public."fleet$meterphoto"
(
    id bigint NOT NULL,
    CONSTRAINT "fleet$meterphoto_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$meterphoto_meterreading"
(
    "fleet$meterphotoid" bigint NOT NULL,
    "fleet$meterreadingid" bigint NOT NULL,
    CONSTRAINT "fleet$meterphoto_meterreading_pkey" PRIMARY KEY ("fleet$meterphotoid", "fleet$meterreadingid"),
    CONSTRAINT "uniq_fleet$meterphoto_meterreading_fleet$meterphotoid" UNIQUE ("fleet$meterphotoid")
);

CREATE TABLE IF NOT EXISTS public."fleet$meterreading"
(
    id bigint NOT NULL,
    "time" timestamp without time zone,
    value integer,
    uom character varying(5) COLLATE pg_catalog."default",
    _filedata text COLLATE pg_catalog."default",
    filecount integer,
    servicesheetuuid character varying(200) COLLATE pg_catalog."default",
    unibiswo integer,
    "system$owner" bigint,
    CONSTRAINT "fleet$meterreading_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$meterreading_asset"
(
    "fleet$meterreadingid" bigint NOT NULL,
    "fleet$assetid" bigint NOT NULL,
    CONSTRAINT "fleet$meterreading_asset_pkey" PRIMARY KEY ("fleet$meterreadingid", "fleet$assetid"),
    CONSTRAINT "uniq_fleet$meterreading_asset_fleet$meterreadingid" UNIQUE ("fleet$meterreadingid")
);

CREATE TABLE IF NOT EXISTS public."fleet$meterreading_latest_asset"
(
    "fleet$meterreadingid" bigint NOT NULL,
    "fleet$assetid" bigint NOT NULL,
    CONSTRAINT "fleet$meterreading_latest_asset_pkey" PRIMARY KEY ("fleet$meterreadingid", "fleet$assetid"),
    CONSTRAINT "uniq_fleet$meterreading_latest_asset_fleet$assetid" UNIQUE ("fleet$assetid"),
    CONSTRAINT "uniq_fleet$meterreading_latest_asset_fleet$meterreadingid" UNIQUE ("fleet$meterreadingid")
);

CREATE TABLE IF NOT EXISTS public."fleet$meterreading_unitofmeasurement"
(
    "fleet$meterreadingid" bigint NOT NULL,
    "fleet$unitofmeasurementid" bigint NOT NULL,
    CONSTRAINT "fleet$meterreading_unitofmeasurement_pkey" PRIMARY KEY ("fleet$meterreadingid", "fleet$unitofmeasurementid"),
    CONSTRAINT "uniq_fleet$meterreading_unitofmeasurement_fleet$meterreadingid" UNIQUE ("fleet$meterreadingid")
);

CREATE TABLE IF NOT EXISTS public."fleet$operator"
(
    id bigint NOT NULL,
    code character varying(200) COLLATE pg_catalog."default",
    _oldcode character varying(200) COLLATE pg_catalog."default",
    name character varying(200) COLLATE pg_catalog."default",
    sitedescription character varying(200) COLLATE pg_catalog."default",
    siteaddress character varying(500) COLLATE pg_catalog."default",
    officeaddress character varying(500) COLLATE pg_catalog."default",
    adminorsupervisoremails character varying(1000) COLLATE pg_catalog."default",
    opsmanageremails character varying(1000) COLLATE pg_catalog."default",
    sitemanageremails character varying(1000) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "fleet$operator_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$operator_account_adminorsupervisor"
(
    "fleet$operatorid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "fleet$operator_account_adminorsupervisor_pkey" PRIMARY KEY ("fleet$operatorid", "administration$accountid")
);

CREATE TABLE IF NOT EXISTS public."fleet$operator_account_opsmanager"
(
    "fleet$operatorid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "fleet$operator_account_opsmanager_pkey" PRIMARY KEY ("fleet$operatorid", "administration$accountid")
);

CREATE TABLE IF NOT EXISTS public."fleet$operator_account_sitemanager"
(
    "fleet$operatorid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "fleet$operator_account_sitemanager_pkey" PRIMARY KEY ("fleet$operatorid", "administration$accountid")
);

CREATE TABLE IF NOT EXISTS public."fleet$operator_businessunit"
(
    "fleet$operatorid" bigint NOT NULL,
    "fleet$businessunitid" bigint NOT NULL,
    CONSTRAINT "fleet$operator_businessunit_pkey" PRIMARY KEY ("fleet$operatorid", "fleet$businessunitid"),
    CONSTRAINT "uniq_fleet$operator_businessunit_fleet$operatorid" UNIQUE ("fleet$operatorid")
);

CREATE TABLE IF NOT EXISTS public."fleet$operator_division"
(
    "fleet$operatorid" bigint NOT NULL,
    "fleet$divisionid" bigint NOT NULL,
    CONSTRAINT "fleet$operator_division_pkey" PRIMARY KEY ("fleet$operatorid", "fleet$divisionid"),
    CONSTRAINT "uniq_fleet$operator_division_fleet$operatorid" UNIQUE ("fleet$operatorid")
);

CREATE TABLE IF NOT EXISTS public."fleet$operator_subvertical"
(
    "fleet$operatorid" bigint NOT NULL,
    "fleet$subverticalid" bigint NOT NULL,
    CONSTRAINT "fleet$operator_subvertical_pkey" PRIMARY KEY ("fleet$operatorid", "fleet$subverticalid"),
    CONSTRAINT "uniq_fleet$operator_subvertical_fleet$operatorid" UNIQUE ("fleet$operatorid")
);

CREATE TABLE IF NOT EXISTS public."fleet$structure"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "fleet$structure_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$subvertical"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    changeddate timestamp without time zone,
    createddate timestamp without time zone,
    CONSTRAINT "fleet$subvertical_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleet$unitofmeasurement"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    description character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "fleet$unitofmeasurement_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleetmanagementcommons$notificationtimer"
(
    id bigint NOT NULL,
    timerswitch boolean,
    CONSTRAINT "fleetmanagementcommons$notificationtimer_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleetmanagementcommons$passwordchangehistory"
(
    id bigint NOT NULL,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    isresetbyadmin boolean,
    CONSTRAINT "fleetmanagementcommons$passwordchangehistory_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."fleetmanagementcommons$passwordchangehistory_account"
(
    "fleetmanagementcommons$passwordchangehistoryid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "fleetmanagementcommons$passwordchangehistory_account_pkey" PRIMARY KEY ("fleetmanagementcommons$passwordchangehistoryid", "administration$accountid"),
    CONSTRAINT "uniq_fleetmanagem$passwordchan_acco_fleetmanageme$passwordchang" UNIQUE ("fleetmanagementcommons$passwordchangehistoryid")
);

CREATE TABLE IF NOT EXISTS public."fleetmanagementcommons$systemconfiguration"
(
    id bigint NOT NULL,
    emailapproverecr character varying(200) COLLATE pg_catalog."default",
    emailunibisecr character varying(200) COLLATE pg_catalog."default",
    emailapproverwcr character varying(200) COLLATE pg_catalog."default",
    emailunibiswcr character varying(200) COLLATE pg_catalog."default",
    emailsrstatusupdate character varying(200) COLLATE pg_catalog."default",
    isopsadminapproverecr boolean,
    isopsadminunibisecr boolean,
    isopsadminapproverwcr boolean,
    isopsadminunibiswcr boolean,
    isopsadminsrstatusupdate boolean,
    isopsmanagerapproverecr boolean,
    isopsmanagerunibisecr boolean,
    isopsmanagerapproverwcr boolean,
    isopsmanagerunibiswcr boolean,
    isopsmanagersrstatusupdate boolean,
    issitemanagerapproverecr boolean,
    issitemanagerunibisecr boolean,
    issitemanagerapproverwcr boolean,
    issitemanagerunibiswcr boolean,
    issitemanagersrstatusupdate boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    emailunibisimporter character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "fleetmanagementcommons$systemconfiguration_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."keymanagement$token"
(
    id bigint NOT NULL,
    expiresin integer,
    expiresat timestamp without time zone,
    value text COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "keymanagement$token_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$association"
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    association_name character varying(511) COLLATE pg_catalog."default" NOT NULL,
    table_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    parent_entity_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    child_entity_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    parent_column_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    child_column_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    pk_index_name character varying(255) COLLATE pg_catalog."default",
    index_name character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT "mendixsystem$association_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$attribute"
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    entity_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    attribute_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    column_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    type integer NOT NULL,
    length integer,
    default_value text COLLATE pg_catalog."default",
    is_auto_number boolean NOT NULL,
    CONSTRAINT "mendixsystem$attribute_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$entity"
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    entity_name character varying(511) COLLATE pg_catalog."default" NOT NULL,
    table_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    superentity_id character varying(255) COLLATE pg_catalog."default",
    remote boolean,
    remote_primary_key boolean,
    CONSTRAINT "mendixsystem$entity_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$entityidentifier"
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    short_id smallint,
    object_sequence bigint,
    CONSTRAINT "mendixsystem$entityidentifier_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$index"
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    table_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    index_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "mendixsystem$index_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$index_column"
(
    index_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    column_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    sort_order boolean NOT NULL,
    ordinal integer NOT NULL,
    CONSTRAINT "mendixsystem$index_column_pkey" PRIMARY KEY (index_id, column_id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$properties"
(
    key character varying(200) COLLATE pg_catalog."default" NOT NULL,
    value character varying(200) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "mendixsystem$properties_pkey" PRIMARY KEY (key)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$remote_primary_key"
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    entity_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    attribute_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    column_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    type integer NOT NULL,
    length integer,
    CONSTRAINT "mendixsystem$remote_primary_key_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$sequence"
(
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    attribute_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    start_value bigint NOT NULL,
    current_value bigint,
    CONSTRAINT "mendixsystem$sequence_pkey" PRIMARY KEY (attribute_id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$unique_constraint"
(
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    table_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    column_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "mendixsystem$unique_constraint_pkey" PRIMARY KEY (name, column_id)
);

CREATE TABLE IF NOT EXISTS public."mendixsystem$version"
(
    versionnumber character varying(255) COLLATE pg_catalog."default" NOT NULL,
    lastsyncdate timestamp without time zone NOT NULL,
    preanalysismigrationversionnumber character varying(255) COLLATE pg_catalog."default" NOT NULL,
    modelversionnumber character varying(255) COLLATE pg_catalog."default",
    sprintrprojectname character varying(511) COLLATE pg_catalog."default",
    mendixversion character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT "mendixsystem$version_pkey" PRIMARY KEY (versionnumber)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$captions"
(
    "mxmodelreflection$mxobjectenumvalueid" bigint NOT NULL,
    "mxmodelreflection$mxobjectenumcaptionsid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$captions_pkey" PRIMARY KEY ("mxmodelreflection$mxobjectenumvalueid", "mxmodelreflection$mxobjectenumcaptionsid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$dbsizeestimate"
(
    id bigint NOT NULL,
    nrofrecords integer,
    calculatedsizeinbytes bigint,
    calculatedsizeinkilobytes bigint,
    findobjecttype character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "mxmodelreflection$dbsizeestimate_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$dbsizeestimate_mxobjecttype"
(
    "mxmodelreflection$dbsizeestimateid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$dbsizeestimate_mxobjecttype_pkey" PRIMARY KEY ("mxmodelreflection$dbsizeestimateid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_mxmodelrefle$dbsizeesti_mxobjectt_mxmodelrefle$dbsizeestim" UNIQUE ("mxmodelreflection$dbsizeestimateid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$microflows"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    module character varying(200) COLLATE pg_catalog."default",
    completename character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "mxmodelreflection$microflows_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$microflows_inputparameter"
(
    "mxmodelreflection$microflowsid" bigint NOT NULL,
    "mxmodelreflection$parameterid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$microflows_inputparameter_pkey" PRIMARY KEY ("mxmodelreflection$microflowsid", "mxmodelreflection$parameterid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$microflows_module"
(
    "mxmodelreflection$microflowsid" bigint NOT NULL,
    "mxmodelreflection$moduleid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$microflows_module_pkey" PRIMARY KEY ("mxmodelreflection$microflowsid", "mxmodelreflection$moduleid"),
    CONSTRAINT "uniq_mxmodelreflect$microflow_module_mxmodelreflect$microflowsi" UNIQUE ("mxmodelreflection$microflowsid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$microflows_output_type"
(
    "mxmodelreflection$microflowsid" bigint NOT NULL,
    "mxmodelreflection$valuetypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$microflows_output_type_pkey" PRIMARY KEY ("mxmodelreflection$microflowsid", "mxmodelreflection$valuetypeid"),
    CONSTRAINT "uniq_mxmodelreflec$microflow_outpu_type_mxmodelreflec$microflow" UNIQUE ("mxmodelreflection$microflowsid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$module"
(
    id bigint NOT NULL,
    modulename character varying(200) COLLATE pg_catalog."default",
    synchronizeobjectswithinmodule boolean,
    CONSTRAINT "mxmodelreflection$module_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectenum"
(
    id bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjectenum_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectenumcaptions"
(
    id bigint NOT NULL,
    caption character varying(200) COLLATE pg_catalog."default",
    languagecode character varying(8) COLLATE pg_catalog."default",
    languagename character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "mxmodelreflection$mxobjectenumcaptions_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectenumvalue"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "mxmodelreflection$mxobjectenumvalue_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectmember"
(
    id bigint NOT NULL,
    attributename character varying(200) COLLATE pg_catalog."default",
    attributetype character varying(200) COLLATE pg_catalog."default",
    attributetypeenum character varying(11) COLLATE pg_catalog."default",
    completename character varying(400) COLLATE pg_catalog."default",
    descriptivename character varying(200) COLLATE pg_catalog."default",
    fieldlength integer,
    isvirtual boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    submetaobjectname character varying(255) COLLATE pg_catalog."default",
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "mxmodelreflection$mxobjectmember_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectmember_mxobjecttype"
(
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjectmember_mxobjecttype_pkey" PRIMARY KEY ("mxmodelreflection$mxobjectmemberid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_mxmodelrefle$mxobjectme_mxobjectt_mxmodelrefle$mxobjectmem" UNIQUE ("mxmodelreflection$mxobjectmemberid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectmember_type"
(
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    "mxmodelreflection$valuetypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjectmember_type_pkey" PRIMARY KEY ("mxmodelreflection$mxobjectmemberid", "mxmodelreflection$valuetypeid"),
    CONSTRAINT "uniq_mxmodelreflec$mxobjectmemb_type_mxmodelreflec$mxobjectmemb" UNIQUE ("mxmodelreflection$mxobjectmemberid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectreference"
(
    id bigint NOT NULL,
    completename character varying(200) COLLATE pg_catalog."default",
    module character varying(200) COLLATE pg_catalog."default",
    name character varying(200) COLLATE pg_catalog."default",
    readablename character varying(200) COLLATE pg_catalog."default",
    referencetype character varying(12) COLLATE pg_catalog."default",
    associationowner character varying(8) COLLATE pg_catalog."default",
    parententity character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "mxmodelreflection$mxobjectreference_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectreference_module"
(
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    "mxmodelreflection$moduleid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjectreference_module_pkey" PRIMARY KEY ("mxmodelreflection$mxobjectreferenceid", "mxmodelreflection$moduleid"),
    CONSTRAINT "uniq_mxmodelrefle$mxobjectrefe_modul_mxmodelrefle$mxobjectrefer" UNIQUE ("mxmodelreflection$mxobjectreferenceid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectreference_mxobjecttype"
(
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjectreference_mxobjecttype_pkey" PRIMARY KEY ("mxmodelreflection$mxobjectreferenceid", "mxmodelreflection$mxobjecttypeid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectreference_mxobjecttype_child"
(
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjectreference_mxobjecttype_child_pkey" PRIMARY KEY ("mxmodelreflection$mxobjectreferenceid", "mxmodelreflection$mxobjecttypeid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjectreference_mxobjecttype_parent"
(
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjectreference_mxobjecttype_parent_pkey" PRIMARY KEY ("mxmodelreflection$mxobjectreferenceid", "mxmodelreflection$mxobjecttypeid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjecttype"
(
    id bigint NOT NULL,
    completename character varying(200) COLLATE pg_catalog."default",
    name character varying(200) COLLATE pg_catalog."default",
    module character varying(200) COLLATE pg_catalog."default",
    readablename character varying(400) COLLATE pg_catalog."default",
    persistencetype character varying(14) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "mxmodelreflection$mxobjecttype_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjecttype_module"
(
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    "mxmodelreflection$moduleid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjecttype_module_pkey" PRIMARY KEY ("mxmodelreflection$mxobjecttypeid", "mxmodelreflection$moduleid"),
    CONSTRAINT "uniq_mxmodelreflec$mxobjectty_modul_mxmodelreflect$mxobjecttype" UNIQUE ("mxmodelreflection$mxobjecttypeid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$mxobjecttype_subclassof_mxobjecttype"
(
    "mxmodelreflection$mxobjecttypeid1" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid2" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$mxobjecttype_subclassof_mxobjecttype_pkey" PRIMARY KEY ("mxmodelreflection$mxobjecttypeid1", "mxmodelreflection$mxobjecttypeid2")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$parameter"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "mxmodelreflection$parameter_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$parameter_mxobjecttype"
(
    "mxmodelreflection$parameterid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$parameter_mxobjecttype_pkey" PRIMARY KEY ("mxmodelreflection$parameterid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_mxmodelreflec$paramete_mxobjectty_mxmodelreflec$parameteri" UNIQUE ("mxmodelreflection$parameterid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$parameter_valuetype"
(
    "mxmodelreflection$parameterid" bigint NOT NULL,
    "mxmodelreflection$valuetypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$parameter_valuetype_pkey" PRIMARY KEY ("mxmodelreflection$parameterid", "mxmodelreflection$valuetypeid"),
    CONSTRAINT "uniq_mxmodelreflect$paramete_valuetyp_mxmodelreflect$parameteri" UNIQUE ("mxmodelreflection$parameterid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$token"
(
    id bigint NOT NULL,
    token character varying(50) COLLATE pg_catalog."default",
    prefix character varying(3) COLLATE pg_catalog."default",
    suffix character varying(3) COLLATE pg_catalog."default",
    combinedtoken character varying(56) COLLATE pg_catalog."default",
    description character varying(300) COLLATE pg_catalog."default",
    metamodelpath character varying(1000) COLLATE pg_catalog."default",
    tokentype character varying(9) COLLATE pg_catalog."default",
    status character varying(7) COLLATE pg_catalog."default",
    findobjectstart character varying(200) COLLATE pg_catalog."default",
    findobjectreference character varying(200) COLLATE pg_catalog."default",
    findreference character varying(200) COLLATE pg_catalog."default",
    findmember character varying(200) COLLATE pg_catalog."default",
    findmemberreference character varying(200) COLLATE pg_catalog."default",
    isoptional boolean,
    displaypattern character varying(50) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "mxmodelreflection$token_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$token_mxobjectmember"
(
    "mxmodelreflection$tokenid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$token_mxobjectmember_pkey" PRIMARY KEY ("mxmodelreflection$tokenid", "mxmodelreflection$mxobjectmemberid"),
    CONSTRAINT "uniq_mxmodelreflecti$token_mxobjectmemb_mxmodelreflecti$tokenid" UNIQUE ("mxmodelreflection$tokenid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$token_mxobjectreference"
(
    "mxmodelreflection$tokenid" bigint NOT NULL,
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$token_mxobjectreference_pkey" PRIMARY KEY ("mxmodelreflection$tokenid", "mxmodelreflection$mxobjectreferenceid"),
    CONSTRAINT "uniq_mxmodelreflect$token_mxobjectrefere_mxmodelreflect$tokenid" UNIQUE ("mxmodelreflection$tokenid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$token_mxobjecttype_referenced"
(
    "mxmodelreflection$tokenid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$token_mxobjecttype_referenced_pkey" PRIMARY KEY ("mxmodelreflection$tokenid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_mxmodelreflec$toke_mxobjectt_referenc_mxmodelreflec$tokeni" UNIQUE ("mxmodelreflection$tokenid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$token_mxobjecttype_start"
(
    "mxmodelreflection$tokenid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$token_mxobjecttype_start_pkey" PRIMARY KEY ("mxmodelreflection$tokenid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_mxmodelreflect$token_mxobjectty_start_mxmodelreflect$token" UNIQUE ("mxmodelreflection$tokenid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$values"
(
    "mxmodelreflection$mxobjectenumid" bigint NOT NULL,
    "mxmodelreflection$mxobjectenumvalueid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$values_pkey" PRIMARY KEY ("mxmodelreflection$mxobjectenumid", "mxmodelreflection$mxobjectenumvalueid")
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$valuetype"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    typeenum character varying(11) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "mxmodelreflection$valuetype_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."mxmodelreflection$valuetype_mxobjecttype"
(
    "mxmodelreflection$valuetypeid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "mxmodelreflection$valuetype_mxobjecttype_pkey" PRIMARY KEY ("mxmodelreflection$valuetypeid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_mxmodelreflec$valuetyp_mxobjectty_mxmodelreflec$valuetypei" UNIQUE ("mxmodelreflection$valuetypeid")
);

CREATE TABLE IF NOT EXISTS public."oidc$acr"
(
    id bigint NOT NULL,
    value character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "oidc$acr_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$acr_clientconfiguration"
(
    "oidc$acrid" bigint NOT NULL,
    "oidc$clientconfigurationid" bigint NOT NULL,
    CONSTRAINT "oidc$acr_clientconfiguration_pkey" PRIMARY KEY ("oidc$acrid", "oidc$clientconfigurationid"),
    CONSTRAINT "uniq_oidc$acr_clientconfiguration_oidc$acrid" UNIQUE ("oidc$acrid")
);

CREATE TABLE IF NOT EXISTS public."oidc$authattempt"
(
    id bigint NOT NULL,
    state character varying(1000) COLLATE pg_catalog."default",
    returnurl text COLLATE pg_catalog."default",
    codeverifier character varying(128) COLLATE pg_catalog."default",
    nonce character varying(20) COLLATE pg_catalog."default",
    devicetype character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "oidc$authattempt_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$authattempt_clientconfiguration"
(
    "oidc$authattemptid" bigint NOT NULL,
    "oidc$clientconfigurationid" bigint NOT NULL,
    CONSTRAINT "oidc$authattempt_clientconfiguration_pkey" PRIMARY KEY ("oidc$authattemptid", "oidc$clientconfigurationid"),
    CONSTRAINT "uniq_oidc$authattempt_clientconfiguration_oidc$authattemptid" UNIQUE ("oidc$authattemptid")
);

CREATE TABLE IF NOT EXISTS public."oidc$claim"
(
    id bigint NOT NULL,
    value character varying(2048) COLLATE pg_catalog."default",
    CONSTRAINT "oidc$claim_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$claimset"
(
    id bigint NOT NULL,
    CONSTRAINT "oidc$claimset_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$claimset_claim"
(
    "oidc$claimsetid" bigint NOT NULL,
    "oidc$claimid" bigint NOT NULL,
    CONSTRAINT "oidc$claimset_claim_pkey" PRIMARY KEY ("oidc$claimsetid", "oidc$claimid")
);

CREATE TABLE IF NOT EXISTS public."oidc$clientconfiguration"
(
    id bigint NOT NULL,
    alias character varying(200) COLLATE pg_catalog."default",
    clientid text COLLATE pg_catalog."default",
    clientassertion character varying(20) COLLATE pg_catalog."default",
    encryptedclientsecret character varying(1000) COLLATE pg_catalog."default",
    isdefault boolean,
    active boolean,
    wellknownconfiguri character varying(500) COLLATE pg_catalog."default",
    authorizationendpoint character varying(500) COLLATE pg_catalog."default",
    tokenendpoint character varying(500) COLLATE pg_catalog."default",
    userinfoendpoint character varying(500) COLLATE pg_catalog."default",
    endsessionendpoint character varying(500) COLLATE pg_catalog."default",
    jwksuri character varying(500) COLLATE pg_catalog."default",
    issuer character varying(500) COLLATE pg_catalog."default",
    provisioningflow character varying(23) COLLATE pg_catalog."default",
    responsemode character varying(9) COLLATE pg_catalog."default",
    usepcke boolean,
    customcallbackurl character varying(1024) COLLATE pg_catalog."default",
    clientauthenticationmethod character varying(19) COLLATE pg_catalog."default",
    introspectionendpoint character varying(500) COLLATE pg_catalog."default",
    isdeploytime boolean,
    isclientgrantonly boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "oidc$clientconfiguration_pkey" PRIMARY KEY (id),
    CONSTRAINT "uniq_oidc$clientconfiguration_alias" UNIQUE (alias)
);

CREATE TABLE IF NOT EXISTS public."oidc$clientconfiguration_claimset"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "oidc$claimsetid" bigint NOT NULL,
    CONSTRAINT "oidc$clientconfiguration_claimset_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "oidc$claimsetid"),
    CONSTRAINT "uniq_oidc$clientconfiguratio_claimset_oidc$clientconfigurationi" UNIQUE ("oidc$clientconfigurationid")
);

CREATE TABLE IF NOT EXISTS public."oidc$clientconfiguration_codechallengemethods"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "oidc$codechallengemethodsid" bigint NOT NULL,
    CONSTRAINT "oidc$clientconfiguration_codechallengemethods_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "oidc$codechallengemethodsid")
);

CREATE TABLE IF NOT EXISTS public."oidc$clientconfiguration_codechallengemethodsset"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "oidc$codechallengemethodssetid" bigint NOT NULL,
    CONSTRAINT "oidc$clientconfiguration_codechallengemethodsset_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "oidc$codechallengemethodssetid"),
    CONSTRAINT "uniq_oidc$clientconfigur_codechallengemeth_oidc$clientconfigura" UNIQUE ("oidc$clientconfigurationid")
);

CREATE TABLE IF NOT EXISTS public."oidc$clientconfiguration_microflows"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "mxmodelreflection$microflowsid" bigint NOT NULL,
    CONSTRAINT "oidc$clientconfiguration_microflows_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "mxmodelreflection$microflowsid"),
    CONSTRAINT "uniq_oidc$clientconfigurati_microflows_oidc$clientconfiguration" UNIQUE ("oidc$clientconfigurationid")
);

CREATE TABLE IF NOT EXISTS public."oidc$clientconfiguration_scopeset"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "oidc$scopesetid" bigint NOT NULL,
    CONSTRAINT "oidc$clientconfiguration_scopeset_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "oidc$scopesetid"),
    CONSTRAINT "uniq_oidc$clientconfiguratio_scopeset_oidc$clientconfigurationi" UNIQUE ("oidc$clientconfigurationid")
);

CREATE TABLE IF NOT EXISTS public."oidc$clientconfiguration_userparsing"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "mxmodelreflection$microflowsid" bigint NOT NULL,
    CONSTRAINT "oidc$clientconfiguration_userparsing_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "mxmodelreflection$microflowsid"),
    CONSTRAINT "uniq_oidc$clientconfigurati_userparsin_oidc$clientconfiguration" UNIQUE ("oidc$clientconfigurationid")
);

CREATE TABLE IF NOT EXISTS public."oidc$clientconfiguration_userprovisioning"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "usercommons$userprovisioningid" bigint NOT NULL,
    CONSTRAINT "oidc$clientconfiguration_userprovisioning_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "usercommons$userprovisioningid"),
    CONSTRAINT "uniq_oidc$clientconfigurat_userprovision_oidc$clientconfigurati" UNIQUE ("oidc$clientconfigurationid")
);

CREATE TABLE IF NOT EXISTS public."oidc$codechallengemethods"
(
    id bigint NOT NULL,
    value character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "oidc$codechallengemethods_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$codechallengemethodsset"
(
    id bigint NOT NULL,
    CONSTRAINT "oidc$codechallengemethodsset_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$codechallengemethodsset_codechallengemethods"
(
    "oidc$codechallengemethodssetid" bigint NOT NULL,
    "oidc$codechallengemethodsid" bigint NOT NULL,
    CONSTRAINT "oidc$codechallengemethodsset_codechallengemethods_pkey" PRIMARY KEY ("oidc$codechallengemethodssetid", "oidc$codechallengemethodsid")
);

CREATE TABLE IF NOT EXISTS public."oidc$scope"
(
    id bigint NOT NULL,
    value character varying(1999) COLLATE pg_catalog."default",
    CONSTRAINT "oidc$scope_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$scopeset"
(
    id bigint NOT NULL,
    CONSTRAINT "oidc$scopeset_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$scopeset_scope"
(
    "oidc$scopesetid" bigint NOT NULL,
    "oidc$scopeid" bigint NOT NULL,
    CONSTRAINT "oidc$scopeset_scope_pkey" PRIMARY KEY ("oidc$scopesetid", "oidc$scopeid")
);

CREATE TABLE IF NOT EXISTS public."oidc$selectedclaims"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "oidc$claimid" bigint NOT NULL,
    CONSTRAINT "oidc$selectedclaims_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "oidc$claimid")
);

CREATE TABLE IF NOT EXISTS public."oidc$selectedscopes"
(
    "oidc$clientconfigurationid" bigint NOT NULL,
    "oidc$scopeid" bigint NOT NULL,
    CONSTRAINT "oidc$selectedscopes_pkey" PRIMARY KEY ("oidc$clientconfigurationid", "oidc$scopeid")
);

CREATE TABLE IF NOT EXISTS public."oidc$token"
(
    id bigint NOT NULL,
    access_token text COLLATE pg_catalog."default",
    refresh_token text COLLATE pg_catalog."default",
    _id text COLLATE pg_catalog."default",
    id_token text COLLATE pg_catalog."default",
    token_type text COLLATE pg_catalog."default",
    expires_in integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "oidc$token_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."oidc$token_clientconfiguration"
(
    "oidc$tokenid" bigint NOT NULL,
    "oidc$clientconfigurationid" bigint NOT NULL,
    CONSTRAINT "oidc$token_clientconfiguration_pkey" PRIMARY KEY ("oidc$tokenid", "oidc$clientconfigurationid"),
    CONSTRAINT "uniq_oidc$token_clientconfiguration_oidc$tokenid" UNIQUE ("oidc$tokenid")
);

CREATE TABLE IF NOT EXISTS public."oidc$token_user"
(
    "oidc$tokenid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "oidc$token_user_pkey" PRIMARY KEY ("oidc$tokenid", "system$userid"),
    CONSTRAINT "uniq_oidc$token_user_oidc$tokenid" UNIQUE ("oidc$tokenid")
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$attachmentfile"
(
    id bigint NOT NULL,
    CONSTRAINT "sendgridemailconnector$attachmentfile_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$attachmentfile_templateinfo"
(
    "sendgridemailconnector$attachmentfileid" bigint NOT NULL,
    "sendgridemailconnector$templateinfoid" bigint NOT NULL,
    CONSTRAINT "sendgridemailconnector$attachmentfile_templateinfo_pkey" PRIMARY KEY ("sendgridemailconnector$attachmentfileid", "sendgridemailconnector$templateinfoid"),
    CONSTRAINT "uniq_sendgridemail$attachmen_template_sendgridemail$attachmentf" UNIQUE ("sendgridemailconnector$attachmentfileid")
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$attachmenttosend"
(
    id bigint NOT NULL,
    CONSTRAINT "sendgridemailconnector$attachmenttosend_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$email"
(
    id bigint NOT NULL,
    emailaddress character varying(200) COLLATE pg_catalog."default",
    emailtype character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT "sendgridemailconnector$email_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$emaillog"
(
    id bigint NOT NULL,
    message text COLLATE pg_catalog."default",
    emailsubject character varying(200) COLLATE pg_catalog."default",
    recipient character varying(200) COLLATE pg_catalog."default",
    hasattachment boolean,
    issent boolean,
    createddate timestamp without time zone,
    CONSTRAINT "sendgridemailconnector$emaillog_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$templateinfo"
(
    id bigint NOT NULL,
    templatename character varying(200) COLLATE pg_catalog."default",
    templateid character varying(200) COLLATE pg_catalog."default",
    presetto character varying(200) COLLATE pg_catalog."default",
    presetcc character varying(200) COLLATE pg_catalog."default",
    presetbcc character varying(200) COLLATE pg_catalog."default",
    presetsubject character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "sendgridemailconnector$templateinfo_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$testswitch"
(
    id bigint NOT NULL,
    switchset boolean,
    CONSTRAINT "sendgridemailconnector$testswitch_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$token"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "sendgridemailconnector$token_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."sendgridemailconnector$token_templateinfo"
(
    "sendgridemailconnector$tokenid" bigint NOT NULL,
    "sendgridemailconnector$templateinfoid" bigint NOT NULL,
    CONSTRAINT "sendgridemailconnector$token_templateinfo_pkey" PRIMARY KEY ("sendgridemailconnector$tokenid", "sendgridemailconnector$templateinfoid"),
    CONSTRAINT "uniq_sendgridemailconn$toke_templatein_sendgridemailconn$tokeni" UNIQUE ("sendgridemailconnector$tokenid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$activity"
(
    id bigint NOT NULL,
    lastactiveat timestamp without time zone,
    initial character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "servicesheetmanagement$activity_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$activity_account"
(
    "servicesheetmanagement$activityid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$activity_account_pkey" PRIMARY KEY ("servicesheetmanagement$activityid", "administration$accountid"),
    CONSTRAINT "uniq_servicesheetmanag$activit_accoun_servicesheetmanag$activit" UNIQUE ("servicesheetmanagement$activityid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$activity_servicesheet"
(
    "servicesheetmanagement$activityid" bigint NOT NULL,
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$activity_servicesheet_pkey" PRIMARY KEY ("servicesheetmanagement$activityid", "servicesheetmanagement$servicesheetid"),
    CONSTRAINT "uniq_servicesheetmana$activi_services_servicesheetmana$activity" UNIQUE ("servicesheetmanagement$activityid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$activity_session"
(
    "servicesheetmanagement$activityid" bigint NOT NULL,
    "system$sessionid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$activity_session_pkey" PRIMARY KEY ("servicesheetmanagement$activityid", "system$sessionid"),
    CONSTRAINT "uniq_servicesheetmanag$activit_sessio_servicesheetmanag$activit" UNIQUE ("servicesheetmanagement$activityid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$declaration"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    _configuuid character varying(36) COLLATE pg_catalog."default",
    title character varying(300) COLLATE pg_catalog."default",
    outcome character varying(3) COLLATE pg_catalog."default",
    comment character varying(2000) COLLATE pg_catalog."default",
    sortorder integer,
    initialcompletedby character varying(200) COLLATE pg_catalog."default",
    completedat timestamp without time zone,
    declarationtype character varying(12) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "servicesheetmanagement$declaration_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$declaration_account_completedby"
(
    "servicesheetmanagement$declarationid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$declaration_account_completedby_pkey" PRIMARY KEY ("servicesheetmanagement$declarationid", "administration$accountid"),
    CONSTRAINT "uniq_servicesheetm$declara_accou_complet_servicesheetm$declarat" UNIQUE ("servicesheetmanagement$declarationid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$declaration_servicesheet"
(
    "servicesheetmanagement$declarationid" bigint NOT NULL,
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$declaration_servicesheet_pkey" PRIMARY KEY ("servicesheetmanagement$declarationid", "servicesheetmanagement$servicesheetid"),
    CONSTRAINT "uniq_servicesheetma$declarat_servicesh_servicesheetma$declarati" UNIQUE ("servicesheetmanagement$declarationid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$declarationconfig"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    title character varying(300) COLLATE pg_catalog."default",
    declarationtype character varying(12) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "servicesheetmanagement$declarationconfig_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$field"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    _configuuid character varying(36) COLLATE pg_catalog."default",
    title character varying(400) COLLATE pg_catalog."default",
    description character varying(2000) COLLATE pg_catalog."default",
    sortorder integer,
    versionnumber integer,
    fieldtype character varying(16) COLLATE pg_catalog."default",
    isrequired boolean,
    isdeferrable boolean,
    inspectionstatus character varying(14) COLLATE pg_catalog."default",
    assessmentstatus character varying(6) COLLATE pg_catalog."default",
    initialcompletedby character varying(200) COLLATE pg_catalog."default",
    completedat timestamp without time zone,
    comment character varying(2000) COLLATE pg_catalog."default",
    _filedata text COLLATE pg_catalog."default",
    filecount integer,
    unibisupdatestatus character varying(13) COLLATE pg_catalog."default",
    isreviewed boolean,
    recordcount integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "servicesheetmanagement$field_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$field_account_completedby"
(
    "servicesheetmanagement$fieldid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$field_account_completedby_pkey" PRIMARY KEY ("servicesheetmanagement$fieldid", "administration$accountid"),
    CONSTRAINT "uniq_servicesheetman$fiel_accoun_complet_servicesheetman$fieldi" UNIQUE ("servicesheetmanagement$fieldid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$field_fieldset"
(
    "servicesheetmanagement$fieldid" bigint NOT NULL,
    "servicesheetmanagement$fieldsetid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$field_fieldset_pkey" PRIMARY KEY ("servicesheetmanagement$fieldid", "servicesheetmanagement$fieldsetid"),
    CONSTRAINT "uniq_servicesheetmanage$field_fieldse_servicesheetmanage$fieldi" UNIQUE ("servicesheetmanagement$fieldid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldconfig"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    title character varying(400) COLLATE pg_catalog."default",
    description character varying(2000) COLLATE pg_catalog."default",
    sortorder integer,
    fieldtype character varying(16) COLLATE pg_catalog."default",
    isrequired boolean,
    isdeferrable boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "servicesheetmanagement$fieldconfig_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldconfig_fieldsetconfig"
(
    "servicesheetmanagement$fieldconfigid" bigint NOT NULL,
    "servicesheetmanagement$fieldsetconfigid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$fieldconfig_fieldsetconfig_pkey" PRIMARY KEY ("servicesheetmanagement$fieldconfigid", "servicesheetmanagement$fieldsetconfigid"),
    CONSTRAINT "uniq_servicesheetma$fieldcon_fieldsetc_servicesheetma$fieldconf" UNIQUE ("servicesheetmanagement$fieldconfigid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldset"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    _configuuid character varying(36) COLLATE pg_catalog."default",
    title character varying(300) COLLATE pg_catalog."default",
    description character varying(2000) COLLATE pg_catalog."default",
    sortorder integer,
    isnotapplicable boolean,
    fieldcountall integer,
    fieldcountcompleted integer,
    isattentionrequired boolean,
    isenabled boolean,
    iscollapsed boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    isrequired boolean,
    CONSTRAINT "servicesheetmanagement$fieldset_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldset_servicesheet"
(
    "servicesheetmanagement$fieldsetid" bigint NOT NULL,
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$fieldset_servicesheet_pkey" PRIMARY KEY ("servicesheetmanagement$fieldsetid", "servicesheetmanagement$servicesheetid"),
    CONSTRAINT "uniq_servicesheetmana$fields_services_servicesheetmana$fieldset" UNIQUE ("servicesheetmanagement$fieldsetid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldsetconfig"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    title character varying(300) COLLATE pg_catalog."default",
    description character varying(2000) COLLATE pg_catalog."default",
    sortorder integer,
    fieldcount integer,
    iscollapsed boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "servicesheetmanagement$fieldsetconfig_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldsetconfig_sheettemplate"
(
    "servicesheetmanagement$fieldsetconfigid" bigint NOT NULL,
    "servicesheetmanagement$sheettemplateid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$fieldsetconfig_sheettemplate_pkey" PRIMARY KEY ("servicesheetmanagement$fieldsetconfigid", "servicesheetmanagement$sheettemplateid"),
    CONSTRAINT "uniq_servicesheetm$fieldsetc_sheettemp_servicesheetm$fieldsetco" UNIQUE ("servicesheetmanagement$fieldsetconfigid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldsetref"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    isenabled boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    isrequired boolean,
    CONSTRAINT "servicesheetmanagement$fieldsetref_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldsetref_fieldsetconfig"
(
    "servicesheetmanagement$fieldsetrefid" bigint NOT NULL,
    "servicesheetmanagement$fieldsetconfigid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$fieldsetref_fieldsetconfig_pkey" PRIMARY KEY ("servicesheetmanagement$fieldsetrefid", "servicesheetmanagement$fieldsetconfigid"),
    CONSTRAINT "uniq_servicesheetma$fieldset_fieldsetc_servicesheetma$fieldsetr" UNIQUE ("servicesheetmanagement$fieldsetrefid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$fieldsetref_sheetconfig"
(
    "servicesheetmanagement$fieldsetrefid" bigint NOT NULL,
    "servicesheetmanagement$sheetconfigid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$fieldsetref_sheetconfig_pkey" PRIMARY KEY ("servicesheetmanagement$fieldsetrefid", "servicesheetmanagement$sheetconfigid"),
    CONSTRAINT "uniq_servicesheetman$fieldset_sheetcon_servicesheetman$fieldset" UNIQUE ("servicesheetmanagement$fieldsetrefid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$jsonobject"
(
    id bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$jsonobject_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$photo"
(
    id bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$photo_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$photo_field"
(
    "servicesheetmanagement$photoid" bigint NOT NULL,
    "servicesheetmanagement$fieldid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$photo_field_pkey" PRIMARY KEY ("servicesheetmanagement$photoid", "servicesheetmanagement$fieldid"),
    CONSTRAINT "uniq_servicesheetmanagem$photo_field_servicesheetmanagem$photoi" UNIQUE ("servicesheetmanagement$photoid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$photo_servicesheet"
(
    "servicesheetmanagement$photoid" bigint NOT NULL,
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$photo_servicesheet_pkey" PRIMARY KEY ("servicesheetmanagement$photoid", "servicesheetmanagement$servicesheetid"),
    CONSTRAINT "uniq_servicesheetmanag$phot_serviceshe_servicesheetmanag$photoi" UNIQUE ("servicesheetmanagement$photoid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$record"
(
    id bigint NOT NULL,
    _uuid character varying(200) COLLATE pg_catalog."default",
    _configuuid character varying(200) COLLATE pg_catalog."default",
    title character varying(200) COLLATE pg_catalog."default",
    sortorder integer,
    recordtype character varying(7) COLLATE pg_catalog."default",
    textvalue character varying(2000) COLLATE pg_catalog."default",
    numericvalue numeric(28, 8),
    isrequired boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    datevalue timestamp without time zone,
    CONSTRAINT "servicesheetmanagement$record_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$record_field"
(
    "servicesheetmanagement$recordid" bigint NOT NULL,
    "servicesheetmanagement$fieldid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$record_field_pkey" PRIMARY KEY ("servicesheetmanagement$recordid", "servicesheetmanagement$fieldid"),
    CONSTRAINT "uniq_servicesheetmanage$record_field_servicesheetmanage$recordi" UNIQUE ("servicesheetmanagement$recordid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$recordconfig"
(
    id bigint NOT NULL,
    _uuid character varying(200) COLLATE pg_catalog."default",
    title character varying(200) COLLATE pg_catalog."default",
    sortorder integer,
    recordtype character varying(7) COLLATE pg_catalog."default",
    textdefaultvalue character varying(2000) COLLATE pg_catalog."default",
    numericdefaultvalue numeric(28, 8),
    isrequired boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "servicesheetmanagement$recordconfig_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$recordconfig_fieldconfig"
(
    "servicesheetmanagement$recordconfigid" bigint NOT NULL,
    "servicesheetmanagement$fieldconfigid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$recordconfig_fieldconfig_pkey" PRIMARY KEY ("servicesheetmanagement$recordconfigid", "servicesheetmanagement$fieldconfigid"),
    CONSTRAINT "uniq_servicesheetma$recordcon_fieldcon_servicesheetma$recordcon" UNIQUE ("servicesheetmanagement$recordconfigid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    _configuuid character varying(200) COLLATE pg_catalog."default",
    _templateuuid character varying(36) COLLATE pg_catalog."default",
    _autonumber bigint,
    sheetid character varying(200) COLLATE pg_catalog."default",
    isforall boolean,
    title character varying(300) COLLATE pg_catalog."default",
    description character varying(2000) COLLATE pg_catalog."default",
    completiontime timestamp without time zone,
    startdatetime timestamp without time zone,
    finishdatetime timestamp without time zone,
    kms integer,
    hours integer,
    ebsabskm integer,
    status character varying(10) COLLATE pg_catalog."default",
    commentsbymechanic character varying(2000) COLLATE pg_catalog."default",
    commentsbysupervisor character varying(200) COLLATE pg_catalog."default",
    sendbackreason character varying(2000) COLLATE pg_catalog."default",
    isconfigurable boolean,
    sheettype character varying(12) COLLATE pg_catalog."default",
    assessmenttype character varying(20) COLLATE pg_catalog."default",
    actionsbymechanic character varying(4000) COLLATE pg_catalog."default",
    sheetstartedat timestamp without time zone,
    _filedata text COLLATE pg_catalog."default",
    filecount integer,
    energysourcecountall integer,
    energysourcecountcompleted integer,
    crmcountall integer,
    crmcountcompleted integer,
    isattentionrequiredenergysource boolean,
    isattentionrequiredcrm boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    submitted_at timestamp without time zone,
    CONSTRAINT "servicesheetmanagement$servicesheet_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet_account_mechanic_assignedto"
(
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheet_account_mechanic_assig_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetid", "administration$accountid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet_account_startedby"
(
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheet_account_startedby_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetid", "administration$accountid"),
    CONSTRAINT "uniq_servicesheetm$services_accou_starte_servicesheetm$services" UNIQUE ("servicesheetmanagement$servicesheetid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet_account_supervisor"
(
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheet_account_supervisor_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetid", "administration$accountid"),
    CONSTRAINT "uniq_servicesheetm$service_accou_supervi_servicesheetm$services" UNIQUE ("servicesheetmanagement$servicesheetid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet_equipmenttype_setting"
(
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    "fleet$equipmenttypeid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheet_equipmenttype_setting_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetid", "fleet$equipmenttypeid"),
    CONSTRAINT "uniq_servicesheet$services_equipmen_setti_servicesheet$services" UNIQUE ("servicesheetmanagement$servicesheetid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet_product_setting"
(
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    "ticketmanagement$productid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheet_product_setting_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetid", "ticketmanagement$productid"),
    CONSTRAINT "uniq_servicesheetm$services_produ_setti_servicesheetm$servicesh" UNIQUE ("servicesheetmanagement$servicesheetid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet_sheetconfig"
(
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    "servicesheetmanagement$sheetconfigid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheet_sheetconfig_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetid", "servicesheetmanagement$sheetconfigid"),
    CONSTRAINT "uniq_servicesheetma$servicesh_sheetcon_servicesheetma$servicesh" UNIQUE ("servicesheetmanagement$servicesheetid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet_task_take5"
(
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    "ticketmanagement$taskid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheet_task_take5_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetid", "ticketmanagement$taskid"),
    CONSTRAINT "uniq_servicesheetma$servicesh_tas_take_servicesheetma$servicesh" UNIQUE ("servicesheetmanagement$servicesheetid"),
    CONSTRAINT "uniq_servicesheetmanag$servicesh_task_take5_ticketmanagem$taski" UNIQUE ("ticketmanagement$taskid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheet_workorderticket"
(
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    "workorder$workorderticketid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheet_workorderticket_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetid", "workorder$workorderticketid"),
    CONSTRAINT "uniq_servicesheetm$services_workordert_servicesheetma$servicesh" UNIQUE ("servicesheetmanagement$servicesheetid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheethelper"
(
    id bigint NOT NULL,
    taskid character varying(200) COLLATE pg_catalog."default",
    workorderid character varying(200) COLLATE pg_catalog."default",
    servicesheetid character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "servicesheetmanagement$servicesheethelper_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheethelper_servicesheet"
(
    "servicesheetmanagement$servicesheethelperid" bigint NOT NULL,
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheethelper_servicesheet_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheethelperid", "servicesheetmanagement$servicesheetid"),
    CONSTRAINT "uniq_servicesheet$serviceshee_service_servicesheet$servicesheet" UNIQUE ("servicesheetmanagement$servicesheethelperid"),
    CONSTRAINT "uniq_servicesheetm$serviceshee_services_servicesheetm$servicesh" UNIQUE ("servicesheetmanagement$servicesheetid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheetpdf"
(
    id bigint NOT NULL,
    ismostrecent boolean,
    pdftype character varying(14) COLLATE pg_catalog."default",
    CONSTRAINT "servicesheetmanagement$servicesheetpdf_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheetpdf_servicesheet"
(
    "servicesheetmanagement$servicesheetpdfid" bigint NOT NULL,
    "servicesheetmanagement$servicesheetid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheetpdf_servicesheet_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetpdfid", "servicesheetmanagement$servicesheetid"),
    CONSTRAINT "uniq_servicesheetm$serviceshe_services_servicesheetm$serviceshe" UNIQUE ("servicesheetmanagement$servicesheetpdfid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$servicesheetpdf_workorderticket"
(
    "servicesheetmanagement$servicesheetpdfid" bigint NOT NULL,
    "workorder$workorderticketid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$servicesheetpdf_workorderticket_pkey" PRIMARY KEY ("servicesheetmanagement$servicesheetpdfid", "workorder$workorderticketid"),
    CONSTRAINT "uniq_servicesheetm$servicesh_workorder_servicesheetm$serviceshe" UNIQUE ("servicesheetmanagement$servicesheetpdfid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$sheetconfig"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    name character varying(300) COLLATE pg_catalog."default",
    description character varying(2000) COLLATE pg_catalog."default",
    isconfigurable boolean,
    sheettype character varying(12) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "servicesheetmanagement$sheetconfig_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$sheetconfig_sheettemplate"
(
    "servicesheetmanagement$sheetconfigid" bigint NOT NULL,
    "servicesheetmanagement$sheettemplateid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$sheetconfig_sheettemplate_pkey" PRIMARY KEY ("servicesheetmanagement$sheetconfigid", "servicesheetmanagement$sheettemplateid"),
    CONSTRAINT "uniq_servicesheetma$sheetcon_sheettemp_servicesheetma$sheetconf" UNIQUE ("servicesheetmanagement$sheetconfigid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$sheetsetting"
(
    id bigint NOT NULL,
    isforall boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "servicesheetmanagement$sheetsetting_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$sheetsetting_equipmenttype"
(
    "servicesheetmanagement$sheetsettingid" bigint NOT NULL,
    "fleet$equipmenttypeid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$sheetsetting_equipmenttype_pkey" PRIMARY KEY ("servicesheetmanagement$sheetsettingid", "fleet$equipmenttypeid"),
    CONSTRAINT "uniq_servicesheetma$sheetset_equipment_servicesheetma$sheetsett" UNIQUE ("servicesheetmanagement$sheetsettingid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$sheetsetting_product_servicetasktype"
(
    "servicesheetmanagement$sheetsettingid" bigint NOT NULL,
    "ticketmanagement$productid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$sheetsetting_product_servicetasktyp_pkey" PRIMARY KEY ("servicesheetmanagement$sheetsettingid", "ticketmanagement$productid"),
    CONSTRAINT "uniq_servicesheet$sheetse_produ_servicet_servicesheet$sheetsett" UNIQUE ("servicesheetmanagement$sheetsettingid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$sheetsetting_sheetconfig"
(
    "servicesheetmanagement$sheetsettingid" bigint NOT NULL,
    "servicesheetmanagement$sheetconfigid" bigint NOT NULL,
    CONSTRAINT "servicesheetmanagement$sheetsetting_sheetconfig_pkey" PRIMARY KEY ("servicesheetmanagement$sheetsettingid", "servicesheetmanagement$sheetconfigid")
);

CREATE TABLE IF NOT EXISTS public."servicesheetmanagement$sheettemplate"
(
    id bigint NOT NULL,
    _uuid character varying(36) COLLATE pg_catalog."default",
    name character varying(300) COLLATE pg_catalog."default",
    description character varying(2000) COLLATE pg_catalog."default",
    versionnumber integer,
    fieldsetcount integer,
    fieldcount integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "servicesheetmanagement$sheettemplate_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$autocommitentry"
(
    id bigint NOT NULL,
    sessionid character varying(36) COLLATE pg_catalog."default",
    objectid bigint,
    createddate timestamp without time zone,
    CONSTRAINT "system$autocommitentry_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$backgroundjob"
(
    id bigint NOT NULL,
    jobid bigint,
    starttime timestamp without time zone,
    endtime timestamp without time zone,
    result text COLLATE pg_catalog."default",
    successful boolean,
    CONSTRAINT "system$backgroundjob_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$backgroundjob_session"
(
    "system$backgroundjobid" bigint NOT NULL,
    "system$sessionid" bigint NOT NULL,
    CONSTRAINT "system$backgroundjob_session_pkey" PRIMARY KEY ("system$backgroundjobid", "system$sessionid"),
    CONSTRAINT "uniq_system$backgroundjob_session_system$backgroundjobid" UNIQUE ("system$backgroundjobid")
);

CREATE TABLE IF NOT EXISTS public."system$backgroundjob_xasinstance"
(
    "system$backgroundjobid" bigint NOT NULL,
    "system$xasinstanceid" bigint NOT NULL,
    CONSTRAINT "system$backgroundjob_xasinstance_pkey" PRIMARY KEY ("system$backgroundjobid", "system$xasinstanceid"),
    CONSTRAINT "uniq_system$backgroundjob_xasinstance_system$backgroundjobid" UNIQUE ("system$backgroundjobid")
);

CREATE TABLE IF NOT EXISTS public."system$changehash"
(
    id bigint NOT NULL,
    objectid bigint,
    attribute character varying(200) COLLATE pg_catalog."default",
    hash character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "system$changehash_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$changehash_session"
(
    "system$changehashid" bigint NOT NULL,
    "system$sessionid" bigint NOT NULL,
    CONSTRAINT "system$changehash_session_pkey" PRIMARY KEY ("system$changehashid", "system$sessionid"),
    CONSTRAINT "uniq_system$changehash_session_system$changehashid" UNIQUE ("system$changehashid")
);

CREATE TABLE IF NOT EXISTS public."system$databrokerentitymetadata"
(
    id bigint NOT NULL,
    entityid character varying(36) COLLATE pg_catalog."default",
    memberdetails text COLLATE pg_catalog."default",
    CONSTRAINT "system$databrokerentitymetadata_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$filedocument"
(
    id bigint NOT NULL,
    fileid bigint,
    name character varying(400) COLLATE pg_catalog."default",
    deleteafterdownload boolean,
    contents bytea,
    hascontents boolean,
    size bigint,
    __filename__ bigint,
    __uuid__ character varying(36) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    submetaobjectname character varying(255) COLLATE pg_catalog."default",
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "system$filedocument_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$grantableroles"
(
    "system$userroleid1" bigint NOT NULL,
    "system$userroleid2" bigint NOT NULL,
    CONSTRAINT "system$grantableroles_pkey" PRIMARY KEY ("system$userroleid1", "system$userroleid2")
);

CREATE TABLE IF NOT EXISTS public."system$image"
(
    id bigint NOT NULL,
    publicthumbnailpath character varying(500) COLLATE pg_catalog."default",
    submetaobjectname character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT "system$image_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$language"
(
    id bigint NOT NULL,
    code character varying(20) COLLATE pg_catalog."default",
    description character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "system$language_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$offlinecreatedguids"
(
    id bigint NOT NULL,
    guid character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "system$offlinecreatedguids_pkey" PRIMARY KEY (id),
    CONSTRAINT "uniq_system$offlinecreatedguids_guid" UNIQUE (guid)
);

CREATE TABLE IF NOT EXISTS public."system$offlinesynchronizationhistory"
(
    id bigint NOT NULL,
    syncid character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "system$offlinesynchronizationhistory_pkey" PRIMARY KEY (id),
    CONSTRAINT "uniq_system$offlinesynchronizationhistory_syncid" UNIQUE (syncid)
);

CREATE TABLE IF NOT EXISTS public."system$privatefiledocument"
(
    id bigint NOT NULL,
    CONSTRAINT "system$privatefiledocument_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$processedqueuetask"
(
    id bigint NOT NULL,
    sequence bigint,
    status character varying(12) COLLATE pg_catalog."default",
    queueid character varying(36) COLLATE pg_catalog."default",
    queuename character varying(200) COLLATE pg_catalog."default",
    contexttype character varying(14) COLLATE pg_catalog."default",
    contextdata text COLLATE pg_catalog."default",
    microflowname character varying(200) COLLATE pg_catalog."default",
    useractionname character varying(200) COLLATE pg_catalog."default",
    arguments text COLLATE pg_catalog."default",
    xasid character varying(50) COLLATE pg_catalog."default",
    threadid bigint,
    created timestamp without time zone,
    startat timestamp without time zone,
    started timestamp without time zone,
    finished timestamp without time zone,
    duration bigint,
    retried bigint,
    errormessage text COLLATE pg_catalog."default",
    scheduledeventname character varying(200) COLLATE pg_catalog."default",
    "system$owner" bigint,
    CONSTRAINT "system$processedqueuetask_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$queuedtask"
(
    id bigint NOT NULL,
    sequence bigint,
    status character varying(12) COLLATE pg_catalog."default",
    queueid character varying(36) COLLATE pg_catalog."default",
    queuename character varying(200) COLLATE pg_catalog."default",
    contexttype character varying(14) COLLATE pg_catalog."default",
    contextdata text COLLATE pg_catalog."default",
    microflowname character varying(200) COLLATE pg_catalog."default",
    useractionname character varying(200) COLLATE pg_catalog."default",
    arguments text COLLATE pg_catalog."default",
    xasid character varying(50) COLLATE pg_catalog."default",
    threadid bigint,
    created timestamp without time zone,
    startat timestamp without time zone,
    started timestamp without time zone,
    retried bigint,
    retry character varying(200) COLLATE pg_catalog."default",
    scheduledeventname character varying(200) COLLATE pg_catalog."default",
    "system$owner" bigint,
    CONSTRAINT "system$queuedtask_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$scheduledeventinformation"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    starttime timestamp without time zone,
    endtime timestamp without time zone,
    status character varying(9) COLLATE pg_catalog."default",
    CONSTRAINT "system$scheduledeventinformation_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$scheduledeventinformation_xasinstance"
(
    "system$scheduledeventinformationid" bigint NOT NULL,
    "system$xasinstanceid" bigint NOT NULL,
    CONSTRAINT "system$scheduledeventinformation_xasinstance_pkey" PRIMARY KEY ("system$scheduledeventinformationid", "system$xasinstanceid"),
    CONSTRAINT "uniq_syste$scheduledeventinfo_xasinst_syste$scheduledeventinfor" UNIQUE ("system$scheduledeventinformationid")
);

CREATE TABLE IF NOT EXISTS public."system$session"
(
    id bigint NOT NULL,
    sessionid character varying(50) COLLATE pg_catalog."default",
    csrftoken character varying(36) COLLATE pg_catalog."default",
    lastactive timestamp without time zone,
    longlived boolean,
    readonlyhashkey character varying(36) COLLATE pg_catalog."default",
    lastactionexecution timestamp without time zone,
    createddate timestamp without time zone,
    CONSTRAINT "system$session_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$session_user"
(
    "system$sessionid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "system$session_user_pkey" PRIMARY KEY ("system$sessionid", "system$userid"),
    CONSTRAINT "uniq_system$session_user_system$sessionid" UNIQUE ("system$sessionid")
);

CREATE TABLE IF NOT EXISTS public."system$synchronizationerror"
(
    id bigint NOT NULL,
    reason text COLLATE pg_catalog."default",
    objectid character varying(200) COLLATE pg_catalog."default",
    objecttype character varying(1000) COLLATE pg_catalog."default",
    objectcontent text COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    "system$owner" bigint,
    CONSTRAINT "system$synchronizationerror_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$synchronizationerrorfile"
(
    id bigint NOT NULL,
    CONSTRAINT "system$synchronizationerrorfile_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$synchronizationerrorfile_synchronizationerror"
(
    "system$synchronizationerrorfileid" bigint NOT NULL,
    "system$synchronizationerrorid" bigint NOT NULL,
    CONSTRAINT "system$synchronizationerrorfile_synchronizationerror_pkey" PRIMARY KEY ("system$synchronizationerrorfileid", "system$synchronizationerrorid"),
    CONSTRAINT "uniq_syst$synchronization_synchronizatio_syst$synchronizationer" UNIQUE ("system$synchronizationerrorfileid")
);

CREATE TABLE IF NOT EXISTS public."system$taskqueuetoken"
(
    id bigint NOT NULL,
    queuename character varying(200) COLLATE pg_catalog."default",
    xasid character varying(50) COLLATE pg_catalog."default",
    validuntil timestamp without time zone,
    CONSTRAINT "system$taskqueuetoken_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$thumbnail"
(
    id bigint NOT NULL,
    CONSTRAINT "system$thumbnail_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$thumbnail_image"
(
    "system$thumbnailid" bigint NOT NULL,
    "system$imageid" bigint NOT NULL,
    CONSTRAINT "system$thumbnail_image_pkey" PRIMARY KEY ("system$thumbnailid", "system$imageid"),
    CONSTRAINT "uniq_system$thumbnail_image_system$imageid" UNIQUE ("system$imageid"),
    CONSTRAINT "uniq_system$thumbnail_image_system$thumbnailid" UNIQUE ("system$thumbnailid")
);

CREATE TABLE IF NOT EXISTS public."system$timezone"
(
    id bigint NOT NULL,
    code character varying(50) COLLATE pg_catalog."default",
    description character varying(100) COLLATE pg_catalog."default",
    rawoffset integer,
    CONSTRAINT "system$timezone_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$tokeninformation"
(
    id bigint NOT NULL,
    token character varying(200) COLLATE pg_catalog."default",
    expirydate timestamp without time zone,
    useragent text COLLATE pg_catalog."default",
    CONSTRAINT "system$tokeninformation_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$tokeninformation_user"
(
    "system$tokeninformationid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "system$tokeninformation_user_pkey" PRIMARY KEY ("system$tokeninformationid", "system$userid"),
    CONSTRAINT "uniq_system$tokeninformation_user_system$tokeninformationid" UNIQUE ("system$tokeninformationid")
);

CREATE TABLE IF NOT EXISTS public."system$unreferencedfile"
(
    id bigint NOT NULL,
    filekey character varying(36) COLLATE pg_catalog."default",
    state character varying(8) COLLATE pg_catalog."default",
    transactionid character varying(36) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "system$unreferencedfile_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$unreferencedfile_xasinstance"
(
    "system$unreferencedfileid" bigint NOT NULL,
    "system$xasinstanceid" bigint NOT NULL,
    CONSTRAINT "system$unreferencedfile_xasinstance_pkey" PRIMARY KEY ("system$unreferencedfileid", "system$xasinstanceid"),
    CONSTRAINT "uniq_system$unreferencedfil_xasinstanc_system$unreferencedfilei" UNIQUE ("system$unreferencedfileid")
);

CREATE TABLE IF NOT EXISTS public."system$user"
(
    id bigint NOT NULL,
    name character varying(100) COLLATE pg_catalog."default",
    password character varying(200) COLLATE pg_catalog."default",
    lastlogin timestamp without time zone,
    blocked boolean,
    blockedsince timestamp without time zone,
    active boolean,
    failedlogins integer,
    webserviceuser boolean,
    isanonymous boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    submetaobjectname character varying(255) COLLATE pg_catalog."default",
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "system$user_pkey" PRIMARY KEY (id),
    CONSTRAINT "uniq_system$user_name" UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public."system$user_language"
(
    "system$userid" bigint NOT NULL,
    "system$languageid" bigint NOT NULL,
    CONSTRAINT "system$user_language_pkey" PRIMARY KEY ("system$userid", "system$languageid"),
    CONSTRAINT "uniq_system$user_language_system$userid" UNIQUE ("system$userid")
);

CREATE TABLE IF NOT EXISTS public."system$user_timezone"
(
    "system$userid" bigint NOT NULL,
    "system$timezoneid" bigint NOT NULL,
    CONSTRAINT "system$user_timezone_pkey" PRIMARY KEY ("system$userid", "system$timezoneid"),
    CONSTRAINT "uniq_system$user_timezone_system$userid" UNIQUE ("system$userid")
);

CREATE TABLE IF NOT EXISTS public."system$userreportinfo"
(
    id bigint NOT NULL,
    usertype character varying(8) COLLATE pg_catalog."default",
    hash character varying(64) COLLATE pg_catalog."default",
    CONSTRAINT "system$userreportinfo_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$userreportinfo_user"
(
    "system$userreportinfoid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "system$userreportinfo_user_pkey" PRIMARY KEY ("system$userreportinfoid", "system$userid"),
    CONSTRAINT "uniq_system$userreportinfo_user_system$userreportinfoid" UNIQUE ("system$userreportinfoid")
);

CREATE TABLE IF NOT EXISTS public."system$userrole"
(
    id bigint NOT NULL,
    modelguid character varying(36) COLLATE pg_catalog."default",
    name character varying(100) COLLATE pg_catalog."default",
    description character varying(1000) COLLATE pg_catalog."default",
    CONSTRAINT "system$userrole_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$userroles"
(
    "system$userid" bigint NOT NULL,
    "system$userroleid" bigint NOT NULL,
    CONSTRAINT "system$userroles_pkey" PRIMARY KEY ("system$userid", "system$userroleid")
);

CREATE TABLE IF NOT EXISTS public."system$workflow"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    starttime timestamp without time zone,
    endtime timestamp without time zone,
    duedate timestamp without time zone,
    canberestarted boolean,
    canbecontinued boolean,
    state character varying(12) COLLATE pg_catalog."default",
    reason text COLLATE pg_catalog."default",
    previousstate character varying(12) COLLATE pg_catalog."default",
    objectid bigint,
    processingstate character varying(30) COLLATE pg_catalog."default",
    "system$owner" bigint,
    CONSTRAINT "system$workflow_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$workflow_currentactivity"
(
    "system$workflowid" bigint NOT NULL,
    "system$workflowactivityid" bigint NOT NULL,
    CONSTRAINT "system$workflow_currentactivity_pkey" PRIMARY KEY ("system$workflowid", "system$workflowactivityid")
);

CREATE TABLE IF NOT EXISTS public."system$workflow_parentworkflow"
(
    "system$workflowid1" bigint NOT NULL,
    "system$workflowid2" bigint NOT NULL,
    CONSTRAINT "system$workflow_parentworkflow_pkey" PRIMARY KEY ("system$workflowid1", "system$workflowid2"),
    CONSTRAINT "uniq_system$workflow_parentworkflow_system$workflowid1" UNIQUE ("system$workflowid1")
);

CREATE TABLE IF NOT EXISTS public."system$workflow_workflowdefinition"
(
    "system$workflowid" bigint NOT NULL,
    "system$workflowdefinitionid" bigint NOT NULL,
    CONSTRAINT "system$workflow_workflowdefinition_pkey" PRIMARY KEY ("system$workflowid", "system$workflowdefinitionid"),
    CONSTRAINT "uniq_system$workflow_workflowdefinition_system$workflowid" UNIQUE ("system$workflowid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivity"
(
    id bigint NOT NULL,
    modelguid character varying(36) COLLATE pg_catalog."default",
    activityguid character varying(36) COLLATE pg_catalog."default",
    caption text COLLATE pg_catalog."default",
    state character varying(9) COLLATE pg_catalog."default",
    starttime timestamp without time zone,
    endtime timestamp without time zone,
    error text COLLATE pg_catalog."default",
    activityhash character varying(200) COLLATE pg_catalog."default",
    ismigrationactivity boolean,
    isderivedactivity boolean,
    outcome character varying(200) COLLATE pg_catalog."default",
    outcomemodelguid character varying(36) COLLATE pg_catalog."default",
    CONSTRAINT "system$workflowactivity_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivity_previousactivity"
(
    "system$workflowactivityid1" bigint NOT NULL,
    "system$workflowactivityid2" bigint NOT NULL,
    CONSTRAINT "system$workflowactivity_previousactivity_pkey" PRIMARY KEY ("system$workflowactivityid1", "system$workflowactivityid2")
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivity_subworkflow"
(
    "system$workflowactivityid" bigint NOT NULL,
    "system$workflowid" bigint NOT NULL,
    CONSTRAINT "system$workflowactivity_subworkflow_pkey" PRIMARY KEY ("system$workflowactivityid", "system$workflowid"),
    CONSTRAINT "uniq_system$workflowactivit_subworkflo_system$workflowactivityi" UNIQUE ("system$workflowactivityid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivity_taskactor"
(
    "system$workflowactivityid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "system$workflowactivity_taskactor_pkey" PRIMARY KEY ("system$workflowactivityid", "system$userid"),
    CONSTRAINT "uniq_system$workflowactivity_taskactor_system$workflowactivityi" UNIQUE ("system$workflowactivityid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivity_workflow"
(
    "system$workflowactivityid" bigint NOT NULL,
    "system$workflowid" bigint NOT NULL,
    CONSTRAINT "system$workflowactivity_workflow_pkey" PRIMARY KEY ("system$workflowactivityid", "system$workflowid"),
    CONSTRAINT "uniq_system$workflowactivity_workflow_system$workflowactivityid" UNIQUE ("system$workflowactivityid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivity_workflowusertask"
(
    "system$workflowactivityid" bigint NOT NULL,
    "system$workflowusertaskid" bigint NOT NULL,
    CONSTRAINT "system$workflowactivity_workflowusertask_pkey" PRIMARY KEY ("system$workflowactivityid", "system$workflowusertaskid"),
    CONSTRAINT "uniq_system$workflowactiv_workflowuserta_system$workflowactivit" UNIQUE ("system$workflowactivityid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivity_workflowversion"
(
    "system$workflowactivityid" bigint NOT NULL,
    "system$workflowversionid" bigint NOT NULL,
    CONSTRAINT "system$workflowactivity_workflowversion_pkey" PRIMARY KEY ("system$workflowactivityid", "system$workflowversionid"),
    CONSTRAINT "uniq_system$workflowactivi_workflowversi_system$workflowactivit" UNIQUE ("system$workflowactivityid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivityusertaskoutcome"
(
    id bigint NOT NULL,
    outcome character varying(200) COLLATE pg_catalog."default",
    "time" timestamp without time zone,
    CONSTRAINT "system$workflowactivityusertaskoutcome_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivityusertaskoutcome_user"
(
    "system$workflowactivityusertaskoutcomeid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "system$workflowactivityusertaskoutcome_user_pkey" PRIMARY KEY ("system$workflowactivityusertaskoutcomeid", "system$userid"),
    CONSTRAINT "uniq_syst$workflowactivityuser_use_syste$workflowactivityuserta" UNIQUE ("system$workflowactivityusertaskoutcomeid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowactivityusertaskoutcome_workflowactivity"
(
    "system$workflowactivityusertaskoutcomeid" bigint NOT NULL,
    "system$workflowactivityid" bigint NOT NULL,
    CONSTRAINT "system$workflowactivityusertaskoutcome_workflowactivity_pkey" PRIMARY KEY ("system$workflowactivityusertaskoutcomeid", "system$workflowactivityid"),
    CONSTRAINT "uniq_syst$workflowactivityus_workflowa_syst$workflowactivityuse" UNIQUE ("system$workflowactivityusertaskoutcomeid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowdefinition"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    title character varying(200) COLLATE pg_catalog."default",
    isobsolete boolean,
    islocked boolean,
    modelguid character varying(36) COLLATE pg_catalog."default",
    CONSTRAINT "system$workflowdefinition_pkey" PRIMARY KEY (id),
    CONSTRAINT "uniq_system$workflowdefinition_modelguid" UNIQUE (modelguid)
);

CREATE TABLE IF NOT EXISTS public."system$workflowdefinition_currentworkflowversion"
(
    "system$workflowdefinitionid" bigint NOT NULL,
    "system$workflowversionid" bigint NOT NULL,
    CONSTRAINT "system$workflowdefinition_currentworkflowversion_pkey" PRIMARY KEY ("system$workflowdefinitionid", "system$workflowversionid"),
    CONSTRAINT "uniq_syste$workflowdefin_currentworkflowv_syste$workflowdefinit" UNIQUE ("system$workflowdefinitionid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertask"
(
    id bigint NOT NULL,
    name text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    starttime timestamp without time zone,
    duedate timestamp without time zone,
    endtime timestamp without time zone,
    outcome character varying(200) COLLATE pg_catalog."default",
    state character varying(10) COLLATE pg_catalog."default",
    completiontype character varying(9) COLLATE pg_catalog."default",
    processingstate character varying(30) COLLATE pg_catalog."default",
    error text COLLATE pg_catalog."default",
    CONSTRAINT "system$workflowusertask_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertask_assignee"
(
    "system$workflowusertaskid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "system$workflowusertask_assignee_pkey" PRIMARY KEY ("system$workflowusertaskid", "system$userid"),
    CONSTRAINT "uniq_system$workflowusertask_assignee_system$workflowusertaskid" UNIQUE ("system$workflowusertaskid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertask_targetusers"
(
    "system$workflowusertaskid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "system$workflowusertask_targetusers_pkey" PRIMARY KEY ("system$workflowusertaskid", "system$userid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertask_workflow"
(
    "system$workflowusertaskid" bigint NOT NULL,
    "system$workflowid" bigint NOT NULL,
    CONSTRAINT "system$workflowusertask_workflow_pkey" PRIMARY KEY ("system$workflowusertaskid", "system$workflowid"),
    CONSTRAINT "uniq_system$workflowusertask_workflow_system$workflowusertaskid" UNIQUE ("system$workflowusertaskid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertask_workflowusertaskdefinition"
(
    "system$workflowusertaskid" bigint NOT NULL,
    "system$workflowusertaskdefinitionid" bigint NOT NULL,
    CONSTRAINT "system$workflowusertask_workflowusertaskdefinition_pkey" PRIMARY KEY ("system$workflowusertaskid", "system$workflowusertaskdefinitionid"),
    CONSTRAINT "uniq_syste$workflowuser_workflowusertaskdef_syste$workflowusert" UNIQUE ("system$workflowusertaskid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertaskdefinition"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    isobsolete boolean,
    modelguid character varying(36) COLLATE pg_catalog."default",
    CONSTRAINT "system$workflowusertaskdefinition_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertaskdefinition_workflowdefinition"
(
    "system$workflowusertaskdefinitionid" bigint NOT NULL,
    "system$workflowdefinitionid" bigint NOT NULL,
    CONSTRAINT "system$workflowusertaskdefinition_workflowdefinition_pkey" PRIMARY KEY ("system$workflowusertaskdefinitionid", "system$workflowdefinitionid"),
    CONSTRAINT "uniq_syst$workflowusertask_workflowdefi_syst$workflowusertaskde" UNIQUE ("system$workflowusertaskdefinitionid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertaskoutcome"
(
    id bigint NOT NULL,
    outcome character varying(200) COLLATE pg_catalog."default",
    "time" timestamp without time zone,
    CONSTRAINT "system$workflowusertaskoutcome_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertaskoutcome_user"
(
    "system$workflowusertaskoutcomeid" bigint NOT NULL,
    "system$userid" bigint NOT NULL,
    CONSTRAINT "system$workflowusertaskoutcome_user_pkey" PRIMARY KEY ("system$workflowusertaskoutcomeid", "system$userid"),
    CONSTRAINT "uniq_syste$workflowusertaskout_user_syste$workflowusertaskoutco" UNIQUE ("system$workflowusertaskoutcomeid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowusertaskoutcome_workflowusertask"
(
    "system$workflowusertaskoutcomeid" bigint NOT NULL,
    "system$workflowusertaskid" bigint NOT NULL,
    CONSTRAINT "system$workflowusertaskoutcome_workflowusertask_pkey" PRIMARY KEY ("system$workflowusertaskoutcomeid", "system$workflowusertaskid"),
    CONSTRAINT "uniq_syste$workflowusertask_workflowuse_syste$workflowusertasko" UNIQUE ("system$workflowusertaskoutcomeid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowversion"
(
    id bigint NOT NULL,
    versionhash character varying(200) COLLATE pg_catalog."default",
    modeljson text COLLATE pg_catalog."default",
    CONSTRAINT "system$workflowversion_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."system$workflowversion_previousversion"
(
    "system$workflowversionid1" bigint NOT NULL,
    "system$workflowversionid2" bigint NOT NULL,
    CONSTRAINT "system$workflowversion_previousversion_pkey" PRIMARY KEY ("system$workflowversionid1", "system$workflowversionid2"),
    CONSTRAINT "uniq_system$workflowversi_previousversi_system$workflowversioni" UNIQUE ("system$workflowversionid1")
);

CREATE TABLE IF NOT EXISTS public."system$workflowversion_workflowdefinition"
(
    "system$workflowversionid" bigint NOT NULL,
    "system$workflowdefinitionid" bigint NOT NULL,
    CONSTRAINT "system$workflowversion_workflowdefinition_pkey" PRIMARY KEY ("system$workflowversionid", "system$workflowdefinitionid"),
    CONSTRAINT "uniq_system$workflowversi_workflowdefinit_system$workflowversio" UNIQUE ("system$workflowversionid")
);

CREATE TABLE IF NOT EXISTS public."system$workflowversion_workflowusertaskdefinition"
(
    "system$workflowversionid" bigint NOT NULL,
    "system$workflowusertaskdefinitionid" bigint NOT NULL,
    CONSTRAINT "system$workflowversion_workflowusertaskdefinition_pkey" PRIMARY KEY ("system$workflowversionid", "system$workflowusertaskdefinitionid")
);

CREATE TABLE IF NOT EXISTS public."system$xasinstance"
(
    id bigint NOT NULL,
    xasid character varying(50) COLLATE pg_catalog."default",
    lastupdate timestamp without time zone,
    allowednumberofconcurrentusers integer,
    partnername character varying(200) COLLATE pg_catalog."default",
    customername character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    CONSTRAINT "system$xasinstance_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$activitylog"
(
    id bigint NOT NULL,
    description character varying(200) COLLATE pg_catalog."default",
    status character varying(21) COLLATE pg_catalog."default",
    datelogged timestamp without time zone,
    comment character varying(200) COLLATE pg_catalog."default",
    "system$changedby" bigint,
    CONSTRAINT "ticketmanagement$activitylog_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$activitylog_account"
(
    "ticketmanagement$activitylogid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$activitylog_account_pkey" PRIMARY KEY ("ticketmanagement$activitylogid", "administration$accountid"),
    CONSTRAINT "uniq_ticketmanagem$activitylo_account_ticketmanagem$activitylog" UNIQUE ("ticketmanagement$activitylogid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$activitylog_servicerequest"
(
    "ticketmanagement$activitylogid" bigint NOT NULL,
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$activitylog_servicerequest_pkey" PRIMARY KEY ("ticketmanagement$activitylogid", "ticketmanagement$servicerequestid"),
    CONSTRAINT "uniq_ticketmanage$activityl_servicereq_ticketmanage$activitylog" UNIQUE ("ticketmanagement$activitylogid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$attachment"
(
    id bigint NOT NULL,
    CONSTRAINT "ticketmanagement$attachment_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$attachment_conditioninfo"
(
    "ticketmanagement$attachmentid" bigint NOT NULL,
    "conditionreportmanagement$conditioninfoid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$attachment_conditioninfo_pkey" PRIMARY KEY ("ticketmanagement$attachmentid", "conditionreportmanagement$conditioninfoid"),
    CONSTRAINT "uniq_ticketmanage$attachmen_conditionin_ticketmanage$attachment" UNIQUE ("ticketmanagement$attachmentid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$attachment_ordertask"
(
    "ticketmanagement$attachmentid" bigint NOT NULL,
    "workorder$ordertaskid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$attachment_ordertask_pkey" PRIMARY KEY ("ticketmanagement$attachmentid", "workorder$ordertaskid"),
    CONSTRAINT "uniq_ticketmanagem$attachmen_ordertas_ticketmanagem$attachmenti" UNIQUE ("ticketmanagement$attachmentid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$attachment_task"
(
    "ticketmanagement$attachmentid" bigint NOT NULL,
    "ticketmanagement$taskid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$attachment_task_pkey" PRIMARY KEY ("ticketmanagement$attachmentid", "ticketmanagement$taskid"),
    CONSTRAINT "uniq_ticketmanageme$attachment_task_ticketmanageme$attachmentid" UNIQUE ("ticketmanagement$attachmentid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$deferredtask"
(
    id bigint NOT NULL,
    deferredat timestamp without time zone,
    reason character varying(2000) COLLATE pg_catalog."default",
    srticketid character varying(200) COLLATE pg_catalog."default",
    unibiswo integer,
    taskid character varying(200) COLLATE pg_catalog."default",
    unibistaskid integer,
    originalplanneddate timestamp without time zone,
    newplanneddate timestamp without time zone,
    deferredby character varying(200) COLLATE pg_catalog."default",
    deferredstatus character varying(9) COLLATE pg_catalog."default",
    sendbackreason text COLLATE pg_catalog."default",
    approveremarks character varying(200) COLLATE pg_catalog."default",
    approvedby character varying(200) COLLATE pg_catalog."default",
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    createddate timestamp without time zone,
    CONSTRAINT "ticketmanagement$deferredtask_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$deferredtask_account_deferredby"
(
    "ticketmanagement$deferredtaskid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$deferredtask_account_deferredby_pkey" PRIMARY KEY ("ticketmanagement$deferredtaskid", "administration$accountid"),
    CONSTRAINT "uniq_ticketmanag$deferredt_accou_deferred_ticketmanag$deferredt" UNIQUE ("ticketmanagement$deferredtaskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$deferredtask_asset"
(
    "ticketmanagement$deferredtaskid" bigint NOT NULL,
    "fleet$assetid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$deferredtask_asset_pkey" PRIMARY KEY ("ticketmanagement$deferredtaskid", "fleet$assetid"),
    CONSTRAINT "uniq_ticketmanagem$deferredtas_asset_ticketmanagem$deferredtask" UNIQUE ("ticketmanagement$deferredtaskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$deferredtask_ordertask"
(
    "ticketmanagement$deferredtaskid" bigint NOT NULL,
    "workorder$ordertaskid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$deferredtask_ordertask_pkey" PRIMARY KEY ("ticketmanagement$deferredtaskid", "workorder$ordertaskid"),
    CONSTRAINT "uniq_ticketmanage$deferredta_ordertas_ticketmanage$deferredtask" UNIQUE ("ticketmanagement$deferredtaskid"),
    CONSTRAINT "uniq_ticketmanagemen$deferredtas_ordertask_workorder$ordertaski" UNIQUE ("workorder$ordertaskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$deferredtask_workshop"
(
    "ticketmanagement$deferredtaskid" bigint NOT NULL,
    "workshopmanagement$workshopid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$deferredtask_workshop_pkey" PRIMARY KEY ("ticketmanagement$deferredtaskid", "workshopmanagement$workshopid"),
    CONSTRAINT "uniq_ticketmanagem$deferredta_worksho_ticketmanagem$deferredtas" UNIQUE ("ticketmanagement$deferredtaskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$filesattachment"
(
    id bigint NOT NULL,
    CONSTRAINT "ticketmanagement$filesattachment_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$filesattachment_ordertask"
(
    "ticketmanagement$filesattachmentid" bigint NOT NULL,
    "workorder$ordertaskid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$filesattachment_ordertask_pkey" PRIMARY KEY ("ticketmanagement$filesattachmentid", "workorder$ordertaskid"),
    CONSTRAINT "uniq_ticketmanag$filesattachm_orderta_ticketmanage$filesattachm" UNIQUE ("ticketmanagement$filesattachmentid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$product"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    changeddate timestamp without time zone,
    createddate timestamp without time zone,
    CONSTRAINT "ticketmanagement$product_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest"
(
    id bigint NOT NULL,
    _autonumber bigint,
    ticketid character varying(200) COLLATE pg_catalog."default",
    unibiswo integer,
    systemid character varying(200) COLLATE pg_catalog."default",
    additionalnotes character varying(4000) COLLATE pg_catalog."default",
    totalhoursrequired numeric(28, 8),
    servicedate timestamp without time zone,
    dropoffdatetime timestamp without time zone,
    pickupdatetime timestamp without time zone,
    tasksummary character varying(4000) COLLATE pg_catalog."default",
    requestedat timestamp without time zone,
    approvedat timestamp without time zone,
    priority character varying(6) COLLATE pg_catalog."default",
    wostatus character varying(19) COLLATE pg_catalog."default",
    statuscolor character varying(200) COLLATE pg_catalog."default",
    schedulestatus character varying(12) COLLATE pg_catalog."default",
    calendartitle character varying(2000) COLLATE pg_catalog."default",
    isenteredunibis boolean,
    rejectreason character varying(200) COLLATE pg_catalog."default",
    dateenteredunibis timestamp without time zone,
    ispickupdateconfirmed boolean,
    datereleasedfromunibis timestamp without time zone,
    dateconfirmedworkshop timestamp without time zone,
    sourcesystem character varying(6) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    endservicedate timestamp without time zone,
    markedcompletedinunibis boolean,
    serviceshift character varying(2) COLLATE pg_catalog."default",
    debugging character varying(200) COLLATE pg_catalog."default",
    hoursrequiredperday numeric(28, 8),
    CONSTRAINT "ticketmanagement$servicerequest_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest_account_approvedby"
(
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$servicerequest_account_approvedby_pkey" PRIMARY KEY ("ticketmanagement$servicerequestid", "administration$accountid"),
    CONSTRAINT "uniq_ticketmana$servicereq_accou_approve_ticketmana$servicerequ" UNIQUE ("ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest_account_confirmedby"
(
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$servicerequest_account_confirmedby_pkey" PRIMARY KEY ("ticketmanagement$servicerequestid", "administration$accountid"),
    CONSTRAINT "uniq_ticketmana$servicereq_accou_confirme_ticketmana$servicereq" UNIQUE ("ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest_account_requestedby"
(
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$servicerequest_account_requestedby_pkey" PRIMARY KEY ("ticketmanagement$servicerequestid", "administration$accountid"),
    CONSTRAINT "uniq_ticketmana$servicereq_accou_requeste_ticketmana$servicereq" UNIQUE ("ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest_account_unibis_enteredby"
(
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$servicerequest_account_unibis_enteredby_pkey" PRIMARY KEY ("ticketmanagement$servicerequestid", "administration$accountid"),
    CONSTRAINT "uniq_ticketman$servicere_accou_unib_entere_ticketman$servicereq" UNIQUE ("ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest_account_unibis_releasedby"
(
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$servicerequest_account_unibis_releasedby_pkey" PRIMARY KEY ("ticketmanagement$servicerequestid", "administration$accountid"),
    CONSTRAINT "uniq_ticketman$servicere_accou_unib_release_ticketman$servicere" UNIQUE ("ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest_asset"
(
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    "fleet$assetid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$servicerequest_asset_pkey" PRIMARY KEY ("ticketmanagement$servicerequestid", "fleet$assetid"),
    CONSTRAINT "uniq_ticketmanage$servicereque_asset_ticketmanage$servicereques" UNIQUE ("ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest_availability"
(
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    "workshopmanagement$availabilityid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$servicerequest_availability_pkey" PRIMARY KEY ("ticketmanagement$servicerequestid", "workshopmanagement$availabilityid"),
    CONSTRAINT "uniq_ticketmanag$servicerequ_availabil_ticketmanag$servicereque" UNIQUE ("ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$servicerequest_workshop"
(
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    "workshopmanagement$workshopid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$servicerequest_workshop_pkey" PRIMARY KEY ("ticketmanagement$servicerequestid", "workshopmanagement$workshopid"),
    CONSTRAINT "uniq_ticketmanage$servicerequ_worksho_ticketmanage$servicereque" UNIQUE ("ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$task"
(
    id bigint NOT NULL,
    _autonumber bigint,
    taskid character varying(36) COLLATE pg_catalog."default",
    unibistaskid integer,
    description character varying(2000) COLLATE pg_catalog."default",
    minutesplanned integer,
    taskstatus character varying(19) COLLATE pg_catalog."default",
    scheduleddate timestamp without time zone,
    tasktype character varying(15) COLLATE pg_catalog."default",
    hoursrequired numeric(28, 8),
    systemid character varying(200) COLLATE pg_catalog."default",
    planneddate timestamp without time zone,
    plannedstarttime timestamp without time zone,
    plannedendtime timestamp without time zone,
    deferredcount integer,
    dateinprogress timestamp without time zone,
    changeddate timestamp without time zone,
    CONSTRAINT "ticketmanagement$task_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$task_account_workedby"
(
    "ticketmanagement$taskid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$task_account_workedby_pkey" PRIMARY KEY ("ticketmanagement$taskid", "administration$accountid"),
    CONSTRAINT "uniq_ticketmanageme$task_account_workedby_ticketmanageme$taskid" UNIQUE ("ticketmanagement$taskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$task_asset"
(
    "ticketmanagement$taskid" bigint NOT NULL,
    "fleet$assetid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$task_asset_pkey" PRIMARY KEY ("ticketmanagement$taskid", "fleet$assetid"),
    CONSTRAINT "uniq_ticketmanagement$task_asset_ticketmanagement$taskid" UNIQUE ("ticketmanagement$taskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$task_mechanic"
(
    "ticketmanagement$taskid" bigint NOT NULL,
    "workshopmanagement$mechanicid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$task_mechanic_pkey" PRIMARY KEY ("ticketmanagement$taskid", "workshopmanagement$mechanicid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$task_operator"
(
    "ticketmanagement$taskid" bigint NOT NULL,
    "fleet$operatorid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$task_operator_pkey" PRIMARY KEY ("ticketmanagement$taskid", "fleet$operatorid"),
    CONSTRAINT "uniq_ticketmanagement$task_operator_ticketmanagement$taskid" UNIQUE ("ticketmanagement$taskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$task_product"
(
    "ticketmanagement$taskid" bigint NOT NULL,
    "ticketmanagement$productid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$task_product_pkey" PRIMARY KEY ("ticketmanagement$taskid", "ticketmanagement$productid"),
    CONSTRAINT "uniq_ticketmanagement$task_product_ticketmanagement$taskid" UNIQUE ("ticketmanagement$taskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$task_servicerequest"
(
    "ticketmanagement$taskid" bigint NOT NULL,
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$task_servicerequest_pkey" PRIMARY KEY ("ticketmanagement$taskid", "ticketmanagement$servicerequestid"),
    CONSTRAINT "uniq_ticketmanagemen$task_servicerequest_ticketmanagemen$taskid" UNIQUE ("ticketmanagement$taskid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$taskactivitylog"
(
    id bigint NOT NULL,
    taskstatus character varying(200) COLLATE pg_catalog."default",
    statussetby character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "ticketmanagement$taskactivitylog_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$taskactivitylog_task"
(
    "ticketmanagement$taskactivitylogid" bigint NOT NULL,
    "ticketmanagement$taskid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$taskactivitylog_task_pkey" PRIMARY KEY ("ticketmanagement$taskactivitylogid", "ticketmanagement$taskid"),
    CONSTRAINT "uniq_ticketmanage$taskactivity_task_ticketmanagem$taskactivityl" UNIQUE ("ticketmanagement$taskactivitylogid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$workshopcalendarsearchhelper"
(
    id bigint NOT NULL,
    issearched boolean,
    isbookingfound boolean,
    createddate timestamp without time zone,
    CONSTRAINT "ticketmanagement$workshopcalendarsearchhelper_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$workshopcalendarsearchhelper_asset"
(
    "ticketmanagement$workshopcalendarsearchhelperid" bigint NOT NULL,
    "fleet$assetid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$workshopcalendarsearchhelper_asset_pkey" PRIMARY KEY ("ticketmanagement$workshopcalendarsearchhelperid", "fleet$assetid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$workshopcalendarsearchhelper_branch"
(
    "ticketmanagement$workshopcalendarsearchhelperid" bigint NOT NULL,
    "fleet$branchid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$workshopcalendarsearchhelper_branch_pkey" PRIMARY KEY ("ticketmanagement$workshopcalendarsearchhelperid", "fleet$branchid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$workshopcalendarsearchhelper_servicerequest"
(
    "ticketmanagement$workshopcalendarsearchhelperid" bigint NOT NULL,
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$workshopcalendarsearchhelper_servicereque_pkey" PRIMARY KEY ("ticketmanagement$workshopcalendarsearchhelperid", "ticketmanagement$servicerequestid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$workshopcalendarsearchhelper_session"
(
    "ticketmanagement$workshopcalendarsearchhelperid" bigint NOT NULL,
    "system$sessionid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$workshopcalendarsearchhelper_session_pkey" PRIMARY KEY ("ticketmanagement$workshopcalendarsearchhelperid", "system$sessionid"),
    CONSTRAINT "uniq_ticketman$workshopcalendar_sess_ticketman$workshopcalendar" UNIQUE ("ticketmanagement$workshopcalendarsearchhelperid")
);

CREATE TABLE IF NOT EXISTS public."ticketmanagement$workshopcalendarsearchhelper_workshop"
(
    "ticketmanagement$workshopcalendarsearchhelperid" bigint NOT NULL,
    "workshopmanagement$workshopid" bigint NOT NULL,
    CONSTRAINT "ticketmanagement$workshopcalendarsearchhelper_workshop_pkey" PRIMARY KEY ("ticketmanagement$workshopcalendarsearchhelperid", "workshopmanagement$workshopid")
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$excelfleet"
(
    id bigint NOT NULL,
    division character varying(200) COLLATE pg_catalog."default",
    businessunit character varying(200) COLLATE pg_catalog."default",
    operatorcode character varying(200) COLLATE pg_catalog."default",
    operatorname character varying(200) COLLATE pg_catalog."default",
    registeredstate character varying(200) COLLATE pg_catalog."default",
    country character varying(200) COLLATE pg_catalog."default",
    equipmentid character varying(200) COLLATE pg_catalog."default",
    legacyno character varying(200) COLLATE pg_catalog."default",
    description character varying(200) COLLATE pg_catalog."default",
    equipmenttype character varying(200) COLLATE pg_catalog."default",
    makedesc character varying(200) COLLATE pg_catalog."default",
    modeldesc character varying(200) COLLATE pg_catalog."default",
    equipmenttypesubcategory character varying(200) COLLATE pg_catalog."default",
    rego character varying(200) COLLATE pg_catalog."default",
    oldrego character varying(200) COLLATE pg_catalog."default",
    vinchassis character varying(200) COLLATE pg_catalog."default",
    engineno character varying(200) COLLATE pg_catalog."default",
    serialnumber character varying(200) COLLATE pg_catalog."default",
    age character varying(200) COLLATE pg_catalog."default",
    entity character varying(200) COLLATE pg_catalog."default",
    entitydescription character varying(200) COLLATE pg_catalog."default",
    assetentity character varying(200) COLLATE pg_catalog."default",
    assetnumber character varying(200) COLLATE pg_catalog."default",
    parentid character varying(200) COLLATE pg_catalog."default",
    lastodometerreading character varying(200) COLLATE pg_catalog."default",
    dailyavgodometer character varying(200) COLLATE pg_catalog."default",
    datehours character varying(200) COLLATE pg_catalog."default",
    lasthoursreading character varying(200) COLLATE pg_catalog."default",
    dailyavghours character varying(200) COLLATE pg_catalog."default",
    datehour character varying(200) COLLATE pg_catalog."default",
    lasthourreading character varying(200) COLLATE pg_catalog."default",
    dailyavghour character varying(200) COLLATE pg_catalog."default",
    status character varying(200) COLLATE pg_catalog."default",
    scheduletypecode character varying(200) COLLATE pg_catalog."default",
    scheduletypedescription character varying(200) COLLATE pg_catalog."default",
    warrantytype character varying(200) COLLATE pg_catalog."default",
    xref character varying(200) COLLATE pg_catalog."default",
    livery character varying(200) COLLATE pg_catalog."default",
    ownership character varying(200) COLLATE pg_catalog."default",
    emgroup character varying(200) COLLATE pg_catalog."default",
    custeqid character varying(200) COLLATE pg_catalog."default",
    costcentrecode character varying(200) COLLATE pg_catalog."default",
    hierarchy1 character varying(200) COLLATE pg_catalog."default",
    hierarchy2 character varying(200) COLLATE pg_catalog."default",
    branchname character varying(200) COLLATE pg_catalog."default",
    bookcosttodepreciate character varying(200) COLLATE pg_catalog."default",
    bookltd character varying(200) COLLATE pg_catalog."default",
    bookwrtdown character varying(200) COLLATE pg_catalog."default",
    bookdepreciationgroup character varying(200) COLLATE pg_catalog."default",
    disposalamt character varying(200) COLLATE pg_catalog."default",
    disptransdate character varying(200) COLLATE pg_catalog."default",
    telematics character varying(200) COLLATE pg_catalog."default",
    telematicsnhvasaccreditation character varying(200) COLLATE pg_catalog."default",
    nhvaslicence character varying(200) COLLATE pg_catalog."default",
    nhvasmassmment character varying(200) COLLATE pg_catalog."default",
    nhvasmaintmment character varying(200) COLLATE pg_catalog."default",
    nhvasdateoff character varying(200) COLLATE pg_catalog."default",
    equipmentsubcategory character varying(200) COLLATE pg_catalog."default",
    primaryuse character varying(200) COLLATE pg_catalog."default",
    capitalplan character varying(200) COLLATE pg_catalog."default",
    cmdetails character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    acquireddate character varying(200) COLLATE pg_catalog."default",
    manufactureddate character varying(200) COLLATE pg_catalog."default",
    equipmentstatus character varying(200) COLLATE pg_catalog."default",
    dateodometer character varying(200) COLLATE pg_catalog."default",
    _autonumber bigint,
    CONSTRAINT "unibisintegration$excelfleet_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$excelimportlog"
(
    id bigint NOT NULL,
    issuccessful boolean,
    details character varying(200) COLLATE pg_catalog."default",
    rowcount integer,
    createddate timestamp without time zone,
    _filedata text COLLATE pg_catalog."default",
    completedtime timestamp without time zone,
    emailtextstatus character varying(200) COLLATE pg_catalog."default",
    starttime timestamp without time zone,
    rowcounttotal integer,
    CONSTRAINT "unibisintegration$excelimportlog_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$excelimportlog_account"
(
    "unibisintegration$excelimportlogid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "unibisintegration$excelimportlog_account_pkey" PRIMARY KEY ("unibisintegration$excelimportlogid", "administration$accountid"),
    CONSTRAINT "uniq_unibisintegr$excelimport_accoun_unibisintegr$excelimportlo" UNIQUE ("unibisintegration$excelimportlogid")
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$excelimportlog_excelimportlog"
(
    "unibisintegration$excelimportlogid1" bigint NOT NULL,
    "unibisintegration$excelimportlogid2" bigint NOT NULL,
    CONSTRAINT "unibisintegration$excelimportlog_excelimportlog_pkey" PRIMARY KEY ("unibisintegration$excelimportlogid1", "unibisintegration$excelimportlogid2"),
    CONSTRAINT "uniq_unibisinteg$excelimpor_excelimpor_unibisinteg$excelimportl" UNIQUE ("unibisintegration$excelimportlogid1")
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$excelimportlog_workshop"
(
    "unibisintegration$excelimportlogid" bigint NOT NULL,
    "workshopmanagement$workshopid" bigint NOT NULL,
    CONSTRAINT "unibisintegration$excelimportlog_workshop_pkey" PRIMARY KEY ("unibisintegration$excelimportlogid", "workshopmanagement$workshopid"),
    CONSTRAINT "uniq_unibisintegr$excelimport_worksho_unibisintegr$excelimportl" UNIQUE ("unibisintegration$excelimportlogid")
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$mm401task"
(
    id bigint NOT NULL,
    equip character varying(200) COLLATE pg_catalog."default",
    legacyno character varying(200) COLLATE pg_catalog."default",
    rego character varying(200) COLLATE pg_catalog."default",
    task character varying(200) COLLATE pg_catalog."default",
    schmeter character varying(200) COLLATE pg_catalog."default",
    currmeter character varying(200) COLLATE pg_catalog."default",
    week character varying(200) COLLATE pg_catalog."default",
    operator character varying(200) COLLATE pg_catalog."default",
    entity character varying(200) COLLATE pg_catalog."default",
    serv character varying(200) COLLATE pg_catalog."default",
    uom character varying(200) COLLATE pg_catalog."default",
    product character varying(200) COLLATE pg_catalog."default",
    vdrno character varying(200) COLLATE pg_catalog."default",
    povendor character varying(200) COLLATE pg_catalog."default",
    po character varying(200) COLLATE pg_catalog."default",
    posuf character varying(200) COLLATE pg_catalog."default",
    wowhs character varying(200) COLLATE pg_catalog."default",
    wo integer,
    wosuf character varying(200) COLLATE pg_catalog."default",
    customer character varying(200) COLLATE pg_catalog."default",
    updateplanned character varying(200) COLLATE pg_catalog."default",
    wostatus character varying(200) COLLATE pg_catalog."default",
    taskid integer,
    woseq character varying(200) COLLATE pg_catalog."default",
    recordtype character varying(200) COLLATE pg_catalog."default",
    scheduletype character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    reportdate character varying(200) COLLATE pg_catalog."default",
    currmeterdate character varying(200) COLLATE pg_catalog."default",
    operatorcode character varying(200) COLLATE pg_catalog."default",
    scheduledate character varying(200) COLLATE pg_catalog."default",
    planned character varying(200) COLLATE pg_catalog."default",
    operatorname character varying(200) COLLATE pg_catalog."default",
    orderdate character varying(200) COLLATE pg_catalog."default",
    _autonumber bigint,
    CONSTRAINT "unibisintegration$mm401task_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$unibisfleetimport"
(
    id bigint NOT NULL,
    importtime timestamp without time zone,
    CONSTRAINT "unibisintegration$unibisfleetimport_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$unibisfleetimport_excelimportlog"
(
    "unibisintegration$unibisfleetimportid" bigint NOT NULL,
    "unibisintegration$excelimportlogid" bigint NOT NULL,
    CONSTRAINT "unibisintegration$unibisfleetimport_excelimportlog_pkey" PRIMARY KEY ("unibisintegration$unibisfleetimportid", "unibisintegration$excelimportlogid"),
    CONSTRAINT "uniq_unibisinte$unibisfleet_excelimpor_unibisinteg$unibisfleeti" UNIQUE ("unibisintegration$unibisfleetimportid"),
    CONSTRAINT "uniq_unibisinteg$unibisfleet_excelimpor_unibisinteg$excelimport" UNIQUE ("unibisintegration$excelimportlogid")
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$unibistasksimport"
(
    id bigint NOT NULL,
    importtime timestamp without time zone,
    CONSTRAINT "unibisintegration$unibistasksimport_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$unibistasksimport_excelimportlog"
(
    "unibisintegration$unibistasksimportid" bigint NOT NULL,
    "unibisintegration$excelimportlogid" bigint NOT NULL,
    CONSTRAINT "unibisintegration$unibistasksimport_excelimportlog_pkey" PRIMARY KEY ("unibisintegration$unibistasksimportid", "unibisintegration$excelimportlogid"),
    CONSTRAINT "uniq_unibisinte$unibistasks_excelimpor_unibisinteg$unibistasksi" UNIQUE ("unibisintegration$unibistasksimportid"),
    CONSTRAINT "uniq_unibisinteg$unibistasks_excelimpor_unibisinteg$excelimport" UNIQUE ("unibisintegration$excelimportlogid")
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$unibiswostatusimport"
(
    id bigint NOT NULL,
    importtime timestamp without time zone,
    CONSTRAINT "unibisintegration$unibiswostatusimport_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$unibiswostatusimport_excelimportlog"
(
    "unibisintegration$unibiswostatusimportid" bigint NOT NULL,
    "unibisintegration$excelimportlogid" bigint NOT NULL,
    CONSTRAINT "unibisintegration$unibiswostatusimport_excelimportlog_pkey" PRIMARY KEY ("unibisintegration$unibiswostatusimportid", "unibisintegration$excelimportlogid"),
    CONSTRAINT "uniq_unibisinte$unibiswostat_excelimpo_unibisinte$unibiswostatu" UNIQUE ("unibisintegration$unibiswostatusimportid"),
    CONSTRAINT "uniq_unibisinte$unibiswostat_excelimpor_unibisinteg$excelimport" UNIQUE ("unibisintegration$excelimportlogid")
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$wo209task"
(
    id bigint NOT NULL,
    equipmentid_taskid character varying(200) COLLATE pg_catalog."default",
    legaycno character varying(200) COLLATE pg_catalog."default",
    rego character varying(200) COLLATE pg_catalog."default",
    description character varying(200) COLLATE pg_catalog."default",
    requesteddate timestamp without time zone,
    entity character varying(200) COLLATE pg_catalog."default",
    workorder character varying(200) COLLATE pg_catalog."default",
    wostatus character varying(200) COLLATE pg_catalog."default",
    wotype character varying(200) COLLATE pg_catalog."default",
    product character varying(200) COLLATE pg_catalog."default",
    wo_whs character varying(200) COLLATE pg_catalog."default",
    estimate character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "unibisintegration$wo209task_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."unibisintegration$wostatus"
(
    id bigint NOT NULL,
    wo integer,
    wostatus character varying(200) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    _autonumber bigint,
    CONSTRAINT "unibisintegration$wostatus_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."usercommons$claim"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    friendlyname character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "usercommons$claim_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."usercommons$claim_userprovisioning"
(
    "usercommons$claimid" bigint NOT NULL,
    "usercommons$userprovisioningid" bigint NOT NULL,
    CONSTRAINT "usercommons$claim_userprovisioning_pkey" PRIMARY KEY ("usercommons$claimid", "usercommons$userprovisioningid"),
    CONSTRAINT "uniq_usercommons$claim_userprovisioning_usercommons$claimid" UNIQUE ("usercommons$claimid")
);

CREATE TABLE IF NOT EXISTS public."usercommons$claimentityattribute"
(
    id bigint NOT NULL,
    CONSTRAINT "usercommons$claimentityattribute_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."usercommons$claimentityattribute_claim"
(
    "usercommons$claimentityattributeid" bigint NOT NULL,
    "usercommons$claimid" bigint NOT NULL,
    CONSTRAINT "usercommons$claimentityattribute_claim_pkey" PRIMARY KEY ("usercommons$claimentityattributeid", "usercommons$claimid"),
    CONSTRAINT "uniq_usercommo$claimentityattr_clai_usercommo$claimentityattrib" UNIQUE ("usercommons$claimentityattributeid")
);

CREATE TABLE IF NOT EXISTS public."usercommons$claimentityattribute_entityattribute"
(
    "usercommons$claimentityattributeid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "usercommons$claimentityattribute_entityattribute_pkey" PRIMARY KEY ("usercommons$claimentityattributeid", "mxmodelreflection$mxobjectmemberid"),
    CONSTRAINT "uniq_usercomm$claimentityat_entityattr_usercomm$claimentityattr" UNIQUE ("usercommons$claimentityattributeid")
);

CREATE TABLE IF NOT EXISTS public."usercommons$claimentityattribute_userprovisioning"
(
    "usercommons$claimentityattributeid" bigint NOT NULL,
    "usercommons$userprovisioningid" bigint NOT NULL,
    CONSTRAINT "usercommons$claimentityattribute_userprovisioning_pkey" PRIMARY KEY ("usercommons$claimentityattributeid", "usercommons$userprovisioningid"),
    CONSTRAINT "uniq_usercomm$claimentityat_userprovisi_usercomm$claimentityatt" UNIQUE ("usercommons$claimentityattributeid")
);

CREATE TABLE IF NOT EXISTS public."usercommons$userprovisioning"
(
    id bigint NOT NULL,
    allowcreateusers boolean,
    usertype character varying(8) COLLATE pg_catalog."default",
    CONSTRAINT "usercommons$userprovisioning_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."usercommons$userprovisioning_customentity"
(
    "usercommons$userprovisioningid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "usercommons$userprovisioning_customentity_pkey" PRIMARY KEY ("usercommons$userprovisioningid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_usercommo$userprovisio_customenti_usercommo$userprovisioni" UNIQUE ("usercommons$userprovisioningid")
);

CREATE TABLE IF NOT EXISTS public."usercommons$userprovisioning_customuserprovisioning"
(
    "usercommons$userprovisioningid" bigint NOT NULL,
    "mxmodelreflection$microflowsid" bigint NOT NULL,
    CONSTRAINT "usercommons$userprovisioning_customuserprovisioning_pkey" PRIMARY KEY ("usercommons$userprovisioningid", "mxmodelreflection$microflowsid"),
    CONSTRAINT "uniq_usercomm$userprovisi_customuserprovi_usercomm$userprovisio" UNIQUE ("usercommons$userprovisioningid")
);

CREATE TABLE IF NOT EXISTS public."usercommons$userprovisioning_principalattribute"
(
    "usercommons$userprovisioningid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "usercommons$userprovisioning_principalattribute_pkey" PRIMARY KEY ("usercommons$userprovisioningid", "mxmodelreflection$mxobjectmemberid"),
    CONSTRAINT "uniq_usercomm$userprovisi_principalattr_usercommo$userprovision" UNIQUE ("usercommons$userprovisioningid")
);

CREATE TABLE IF NOT EXISTS public."usercommons$userprovisioning_userrole"
(
    "usercommons$userprovisioningid" bigint NOT NULL,
    "system$userroleid" bigint NOT NULL,
    CONSTRAINT "usercommons$userprovisioning_userrole_pkey" PRIMARY KEY ("usercommons$userprovisioningid", "system$userroleid"),
    CONSTRAINT "uniq_usercommo$userprovision_userrol_usercommon$userprovisionin" UNIQUE ("usercommons$userprovisioningid")
);

CREATE TABLE IF NOT EXISTS public."workorder$ordertask"
(
    id bigint NOT NULL,
    taskid character varying(200) COLLATE pg_catalog."default",
    taskdescription character varying(2000) COLLATE pg_catalog."default",
    costcode character varying(200) COLLATE pg_catalog."default",
    initcomp character varying(200) COLLATE pg_catalog."default",
    feedbackdescription character varying(2000) COLLATE pg_catalog."default",
    tasktype character varying(15) COLLATE pg_catalog."default",
    _filedata text COLLATE pg_catalog."default",
    deferreason text COLLATE pg_catalog."default",
    hscstep1 character varying(3) COLLATE pg_catalog."default",
    hscstep2 character varying(3) COLLATE pg_catalog."default",
    hscstep3 character varying(3) COLLATE pg_catalog."default",
    jsea character varying(3) COLLATE pg_catalog."default",
    hscstep4 character varying(3) COLLATE pg_catalog."default",
    hscstep5 character varying(3) COLLATE pg_catalog."default",
    ispermitted boolean,
    tasktake5formstatus character varying(9) COLLATE pg_catalog."default",
    CONSTRAINT "workorder$ordertask_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."workorder$ordertask_task"
(
    "workorder$ordertaskid" bigint NOT NULL,
    "ticketmanagement$taskid" bigint NOT NULL,
    CONSTRAINT "workorder$ordertask_task_pkey" PRIMARY KEY ("workorder$ordertaskid", "ticketmanagement$taskid"),
    CONSTRAINT "uniq_workorder$ordertask_task_ticketmanagement$taskid" UNIQUE ("ticketmanagement$taskid"),
    CONSTRAINT "uniq_workorder$ordertask_task_workorder$ordertaskid" UNIQUE ("workorder$ordertaskid")
);

CREATE TABLE IF NOT EXISTS public."workorder$ordertask_workorderticket"
(
    "workorder$ordertaskid" bigint NOT NULL,
    "workorder$workorderticketid" bigint NOT NULL,
    CONSTRAINT "workorder$ordertask_workorderticket_pkey" PRIMARY KEY ("workorder$ordertaskid", "workorder$workorderticketid"),
    CONSTRAINT "uniq_workorder$ordertask_workorderticket_workorder$ordertaskid" UNIQUE ("workorder$ordertaskid")
);

CREATE TABLE IF NOT EXISTS public."workorder$workorderticket"
(
    id bigint NOT NULL,
    _autonumber bigint,
    workorderno character varying(200) COLLATE pg_catalog."default",
    workgroup character varying(200) COLLATE pg_catalog."default",
    customer character varying(200) COLLATE pg_catalog."default",
    customerref character varying(200) COLLATE pg_catalog."default",
    contact character varying(200) COLLATE pg_catalog."default",
    createdat timestamp without time zone,
    requiredat timestamp without time zone,
    status character varying(9) COLLATE pg_catalog."default",
    additionalcomments text COLLATE pg_catalog."default",
    approvalcomment text COLLATE pg_catalog."default",
    unibisupdated character varying(3) COLLATE pg_catalog."default",
    sendbackreason text COLLATE pg_catalog."default",
    rejectreason text COLLATE pg_catalog."default",
    take5formstatus character varying(9) COLLATE pg_catalog."default",
    viewingtaskid character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "workorder$workorderticket_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."workorder$workorderticket_servicerequest"
(
    "workorder$workorderticketid" bigint NOT NULL,
    "ticketmanagement$servicerequestid" bigint NOT NULL,
    CONSTRAINT "workorder$workorderticket_servicerequest_pkey" PRIMARY KEY ("workorder$workorderticketid", "ticketmanagement$servicerequestid"),
    CONSTRAINT "uniq_workord$workordertic_servicerequ_ticketmanage$servicereque" UNIQUE ("ticketmanagement$servicerequestid"),
    CONSTRAINT "uniq_workorde$workordertic_servicereque_workorde$workorderticke" UNIQUE ("workorder$workorderticketid")
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$availability"
(
    id bigint NOT NULL,
    weekstart timestamp without time zone,
    weekend timestamp without time zone,
    totalhours numeric(28, 8),
    mondayhours numeric(28, 8),
    tuesdayhours numeric(28, 8),
    wednesdayhours numeric(28, 8),
    thursdayhours numeric(28, 8),
    fridayhours numeric(28, 8),
    saturdayhours numeric(28, 8),
    sundayhours numeric(28, 8),
    shifttype character varying(2) COLLATE pg_catalog."default",
    CONSTRAINT "workshopmanagement$availability_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$availability_workshop"
(
    "workshopmanagement$availabilityid" bigint NOT NULL,
    "workshopmanagement$workshopid" bigint NOT NULL,
    CONSTRAINT "workshopmanagement$availability_workshop_pkey" PRIMARY KEY ("workshopmanagement$availabilityid", "workshopmanagement$workshopid"),
    CONSTRAINT "uniq_workshopmanag$availabili_worksho_workshopmanag$availabilit" UNIQUE ("workshopmanagement$availabilityid")
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$availabilityhelper"
(
    id bigint NOT NULL,
    weekstart timestamp without time zone,
    weekend timestamp without time zone,
    CONSTRAINT "workshopmanagement$availabilityhelper_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$availabilityhelper_availability"
(
    "workshopmanagement$availabilityhelperid" bigint NOT NULL,
    "workshopmanagement$availabilityid" bigint NOT NULL,
    CONSTRAINT "workshopmanagement$availabilityhelper_availability_pkey" PRIMARY KEY ("workshopmanagement$availabilityhelperid", "workshopmanagement$availabilityid"),
    CONSTRAINT "uniq_workshopman$availabilit_availabi_workshopmana$availability" UNIQUE ("workshopmanagement$availabilityhelperid"),
    CONSTRAINT "uniq_workshopmana$availability_availabil_workshopmana$availabil" UNIQUE ("workshopmanagement$availabilityid")
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$availableday"
(
    id bigint NOT NULL,
    startat timestamp without time zone,
    endat timestamp without time zone,
    dayofweek integer,
    dayinyear integer,
    year integer,
    month integer,
    dayinmonth integer,
    hoursavailable numeric(28, 8),
    hoursbooked numeric(28, 8),
    hoursbalance numeric(28, 8),
    shift character varying(2) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "workshopmanagement$availableday_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$availableday_workshop"
(
    "workshopmanagement$availabledayid" bigint NOT NULL,
    "workshopmanagement$workshopid" bigint NOT NULL,
    CONSTRAINT "workshopmanagement$availableday_workshop_pkey" PRIMARY KEY ("workshopmanagement$availabledayid", "workshopmanagement$workshopid"),
    CONSTRAINT "uniq_workshopmanag$availabled_worksho_workshopmanag$availableda" UNIQUE ("workshopmanagement$availabledayid")
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$mechanic"
(
    id bigint NOT NULL,
    mechanicid bigint,
    mechanicname character varying(200) COLLATE pg_catalog."default",
    "position" character varying(32) COLLATE pg_catalog."default",
    otherposition character varying(200) COLLATE pg_catalog."default",
    email character varying(200) COLLATE pg_catalog."default",
    isleader boolean,
    CONSTRAINT "workshopmanagement$mechanic_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$mechanic_account"
(
    "workshopmanagement$mechanicid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "workshopmanagement$mechanic_account_pkey" PRIMARY KEY ("workshopmanagement$mechanicid", "administration$accountid"),
    CONSTRAINT "uniq_workshopmanagem$mechanic_account_workshopmanagem$mechanici" UNIQUE ("workshopmanagement$mechanicid"),
    CONSTRAINT "uniq_workshopmanagemen$mechanic_account_administratio$accountid" UNIQUE ("administration$accountid")
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$mechanic_workshop"
(
    "workshopmanagement$mechanicid" bigint NOT NULL,
    "workshopmanagement$workshopid" bigint NOT NULL,
    CONSTRAINT "workshopmanagement$mechanic_workshop_pkey" PRIMARY KEY ("workshopmanagement$mechanicid", "workshopmanagement$workshopid"),
    CONSTRAINT "uniq_workshopmanagem$mechani_worksho_workshopmanageme$mechanici" UNIQUE ("workshopmanagement$mechanicid")
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$workshop"
(
    id bigint NOT NULL,
    workshopid character varying(200) COLLATE pg_catalog."default",
    _oldworkshopid character varying(200) COLLATE pg_catalog."default",
    name character varying(200) COLLATE pg_catalog."default",
    suburb character varying(200) COLLATE pg_catalog."default",
    street character varying(200) COLLATE pg_catalog."default",
    manageremails character varying(1000) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    fulladdress character varying(400) COLLATE pg_catalog."default",
    amshiftstarttime timestamp without time zone,
    pmshiftendtime timestamp without time zone,
    country character varying(200) COLLATE pg_catalog."default",
    postcode character varying(200) COLLATE pg_catalog."default",
    state character varying(200) COLLATE pg_catalog."default",
    pmshiftstarttime timestamp without time zone,
    amshiftendtime timestamp without time zone,
    pmstartinmins integer,
    pmendinmins integer,
    amstartinmins integer,
    amendinmins integer,
    srcompletionemails character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "workshopmanagement$workshop_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$workshop_account_manager"
(
    "workshopmanagement$workshopid" bigint NOT NULL,
    "administration$accountid" bigint NOT NULL,
    CONSTRAINT "workshopmanagement$workshop_account_manager_pkey" PRIMARY KEY ("workshopmanagement$workshopid", "administration$accountid")
);

CREATE TABLE IF NOT EXISTS public."workshopmanagement$workshop_timezone"
(
    "workshopmanagement$workshopid" bigint NOT NULL,
    "system$timezoneid" bigint NOT NULL,
    CONSTRAINT "workshopmanagement$workshop_timezone_pkey" PRIMARY KEY ("workshopmanagement$workshopid", "system$timezoneid"),
    CONSTRAINT "uniq_workshopmanagem$worksho_timezon_workshopmanageme$workshopi" UNIQUE ("workshopmanagement$workshopid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$childmxxpath_mxxpath"
(
    "xlsreport$mxxpathid1" bigint NOT NULL,
    "xlsreport$mxxpathid2" bigint NOT NULL,
    CONSTRAINT "xlsreport$childmxxpath_mxxpath_pkey" PRIMARY KEY ("xlsreport$mxxpathid1", "xlsreport$mxxpathid2"),
    CONSTRAINT "uniq_xlsreport$childmxxpath_mxxpath_xlsreport$mxxpathid1" UNIQUE ("xlsreport$mxxpathid1")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$columnsettings_mxsheet"
(
    "xlsreport$mxcolumnsettingsid" bigint NOT NULL,
    "xlsreport$mxsheetid" bigint NOT NULL,
    CONSTRAINT "xlsreport$columnsettings_mxsheet_pkey" PRIMARY KEY ("xlsreport$mxcolumnsettingsid", "xlsreport$mxsheetid"),
    CONSTRAINT "uniq_xlsrepor$columnsetting_mxsheet_xlsreport$mxcolumnsettingsi" UNIQUE ("xlsreport$mxcolumnsettingsid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$customexcel"
(
    id bigint NOT NULL,
    CONSTRAINT "xlsreport$customexcel_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxcellstyle"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    textbold boolean,
    textitalic boolean,
    textunderline boolean,
    textalignment character varying(6) COLLATE pg_catalog."default",
    textverticalalignment character varying(6) COLLATE pg_catalog."default",
    textcolor character varying(10) COLLATE pg_catalog."default",
    textheight integer,
    backgroundcolor character varying(10) COLLATE pg_catalog."default",
    textrotation integer,
    wraptext boolean,
    bordertop integer,
    borderbottom integer,
    borderleft integer,
    borderright integer,
    bordercolor character varying(10) COLLATE pg_catalog."default",
    format character varying(7) COLLATE pg_catalog."default",
    decimalplaces integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "xlsreport$mxcellstyle_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxcellstyle_template"
(
    "xlsreport$mxcellstyleid" bigint NOT NULL,
    "xlsreport$mxtemplateid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxcellstyle_template_pkey" PRIMARY KEY ("xlsreport$mxcellstyleid", "xlsreport$mxtemplateid"),
    CONSTRAINT "uniq_xlsreport$mxcellstyle_template_xlsreport$mxcellstyleid" UNIQUE ("xlsreport$mxcellstyleid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxcolumn"
(
    id bigint NOT NULL,
    columnnumber integer,
    objectattribute character varying(200) COLLATE pg_catalog."default",
    dataaggregate boolean,
    dataaggregatefunction character varying(7) COLLATE pg_catalog."default",
    resultaggregate boolean,
    resultaggregatefunction character varying(7) COLLATE pg_catalog."default",
    CONSTRAINT "xlsreport$mxcolumn_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxcolumnsettings"
(
    id bigint NOT NULL,
    columnindex integer,
    autosize boolean,
    columnwidth integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "xlsreport$mxcolumnsettings_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxconstraint"
(
    id bigint NOT NULL,
    sequence integer,
    summary character varying(200) COLLATE pg_catalog."default",
    attribute character varying(200) COLLATE pg_catalog."default",
    "constraint" character varying(12) COLLATE pg_catalog."default",
    attributetype character varying(7) COLLATE pg_catalog."default",
    constrainttext character varying(50) COLLATE pg_catalog."default",
    constraintnumber bigint,
    constraintdecimal numeric(28, 8),
    constraintdatetime character varying(6) COLLATE pg_catalog."default",
    constraintboolean boolean,
    andor character varying(3) COLLATE pg_catalog."default",
    CONSTRAINT "xlsreport$mxconstraint_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxconstraint_mxsheet"
(
    "xlsreport$mxconstraintid" bigint NOT NULL,
    "xlsreport$mxsheetid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxconstraint_mxsheet_pkey" PRIMARY KEY ("xlsreport$mxconstraintid", "xlsreport$mxsheetid"),
    CONSTRAINT "uniq_xlsreport$mxconstraint_mxsheet_xlsreport$mxconstraintid" UNIQUE ("xlsreport$mxconstraintid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxconstraint_mxxpath"
(
    "xlsreport$mxconstraintid" bigint NOT NULL,
    "xlsreport$mxxpathid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxconstraint_mxxpath_pkey" PRIMARY KEY ("xlsreport$mxconstraintid", "xlsreport$mxxpathid"),
    CONSTRAINT "uniq_xlsreport$mxconstraint_mxxpath_xlsreport$mxconstraintid" UNIQUE ("xlsreport$mxconstraintid"),
    CONSTRAINT "uniq_xlsreport$mxconstraint_mxxpath_xlsreport$mxxpathid" UNIQUE ("xlsreport$mxxpathid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxdata"
(
    id bigint NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    status character varying(3) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    submetaobjectname character varying(255) COLLATE pg_catalog."default",
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "xlsreport$mxdata_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxdata_mxcellstyle"
(
    "xlsreport$mxdataid" bigint NOT NULL,
    "xlsreport$mxcellstyleid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxdata_mxcellstyle_pkey" PRIMARY KEY ("xlsreport$mxdataid", "xlsreport$mxcellstyleid"),
    CONSTRAINT "uniq_xlsreport$mxdata_mxcellstyle_xlsreport$mxdataid" UNIQUE ("xlsreport$mxdataid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxdata_mxsheet"
(
    "xlsreport$mxdataid" bigint NOT NULL,
    "xlsreport$mxsheetid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxdata_mxsheet_pkey" PRIMARY KEY ("xlsreport$mxdataid", "xlsreport$mxsheetid"),
    CONSTRAINT "uniq_xlsreport$mxdata_mxsheet_xlsreport$mxdataid" UNIQUE ("xlsreport$mxdataid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxreferencehandling"
(
    id bigint NOT NULL,
    reference character varying(200) COLLATE pg_catalog."default",
    jointype character varying(5) COLLATE pg_catalog."default",
    CONSTRAINT "xlsreport$mxreferencehandling_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxreferencehandling_mxsheet"
(
    "xlsreport$mxreferencehandlingid" bigint NOT NULL,
    "xlsreport$mxsheetid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxreferencehandling_mxsheet_pkey" PRIMARY KEY ("xlsreport$mxreferencehandlingid", "xlsreport$mxsheetid"),
    CONSTRAINT "uniq_xlsrepor$mxreferencehand_mxshee_xlsrepor$mxreferencehandli" UNIQUE ("xlsreport$mxreferencehandlingid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxrowsettings"
(
    id bigint NOT NULL,
    rowindex integer,
    defaultheight boolean,
    rowheight integer,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "xlsreport$mxrowsettings_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxrowsettings_mxsheet"
(
    "xlsreport$mxrowsettingsid" bigint NOT NULL,
    "xlsreport$mxsheetid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxrowsettings_mxsheet_pkey" PRIMARY KEY ("xlsreport$mxrowsettingsid", "xlsreport$mxsheetid"),
    CONSTRAINT "uniq_xlsreport$mxrowsettings_mxsheet_xlsreport$mxrowsettingsid" UNIQUE ("xlsreport$mxrowsettingsid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsheet"
(
    id bigint NOT NULL,
    sequence integer,
    name character varying(200) COLLATE pg_catalog."default",
    datausage boolean,
    status character varying(3) COLLATE pg_catalog."default",
    distinctdata boolean,
    startrow integer,
    columnwidthdefault boolean,
    columnwidthpixels integer,
    rowheightdefault boolean,
    rowheightpoint integer,
    formlayout_groupby boolean,
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "xlsreport$mxsheet_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsheet_defaultstyle"
(
    "xlsreport$mxsheetid" bigint NOT NULL,
    "xlsreport$mxcellstyleid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxsheet_defaultstyle_pkey" PRIMARY KEY ("xlsreport$mxsheetid", "xlsreport$mxcellstyleid"),
    CONSTRAINT "uniq_xlsreport$mxsheet_defaultstyle_xlsreport$mxsheetid" UNIQUE ("xlsreport$mxsheetid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsheet_headerstyle"
(
    "xlsreport$mxsheetid" bigint NOT NULL,
    "xlsreport$mxcellstyleid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxsheet_headerstyle_pkey" PRIMARY KEY ("xlsreport$mxsheetid", "xlsreport$mxcellstyleid"),
    CONSTRAINT "uniq_xlsreport$mxsheet_headerstyle_xlsreport$mxsheetid" UNIQUE ("xlsreport$mxsheetid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsheet_mxobjectreference"
(
    "xlsreport$mxsheetid" bigint NOT NULL,
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxsheet_mxobjectreference_pkey" PRIMARY KEY ("xlsreport$mxsheetid", "mxmodelreflection$mxobjectreferenceid"),
    CONSTRAINT "uniq_xlsreport$mxsheet_mxobjectreference_xlsreport$mxsheetid" UNIQUE ("xlsreport$mxsheetid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsheet_rowobject"
(
    "xlsreport$mxsheetid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxsheet_rowobject_pkey" PRIMARY KEY ("xlsreport$mxsheetid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_xlsreport$mxsheet_rowobject_xlsreport$mxsheetid" UNIQUE ("xlsreport$mxsheetid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsheet_template"
(
    "xlsreport$mxsheetid" bigint NOT NULL,
    "xlsreport$mxtemplateid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxsheet_template_pkey" PRIMARY KEY ("xlsreport$mxsheetid", "xlsreport$mxtemplateid"),
    CONSTRAINT "uniq_xlsreport$mxsheet_template_xlsreport$mxsheetid" UNIQUE ("xlsreport$mxsheetid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsorting"
(
    id bigint NOT NULL,
    sequence integer,
    summary character varying(200) COLLATE pg_catalog."default",
    attribute character varying(200) COLLATE pg_catalog."default",
    sortingdirection character varying(4) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$owner" bigint,
    "system$changedby" bigint,
    CONSTRAINT "xlsreport$mxsorting_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsorting_mxsheet"
(
    "xlsreport$mxsortingid" bigint NOT NULL,
    "xlsreport$mxsheetid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxsorting_mxsheet_pkey" PRIMARY KEY ("xlsreport$mxsortingid", "xlsreport$mxsheetid"),
    CONSTRAINT "uniq_xlsreport$mxsorting_mxsheet_xlsreport$mxsortingid" UNIQUE ("xlsreport$mxsortingid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxsorting_mxxpath"
(
    "xlsreport$mxsortingid" bigint NOT NULL,
    "xlsreport$mxxpathid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxsorting_mxxpath_pkey" PRIMARY KEY ("xlsreport$mxsortingid", "xlsreport$mxxpathid"),
    CONSTRAINT "uniq_xlsreport$mxsorting_mxxpath_xlsreport$mxsortingid" UNIQUE ("xlsreport$mxsortingid"),
    CONSTRAINT "uniq_xlsreport$mxsorting_mxxpath_xlsreport$mxxpathid" UNIQUE ("xlsreport$mxxpathid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxstatic"
(
    id bigint NOT NULL,
    columnplace integer,
    rowplace integer,
    statictype character varying(12) COLLATE pg_catalog."default",
    aggregatefunction character varying(7) COLLATE pg_catalog."default",
    CONSTRAINT "xlsreport$mxstatic_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxstatic_mxcolumn"
(
    "xlsreport$mxstaticid" bigint NOT NULL,
    "xlsreport$mxcolumnid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxstatic_mxcolumn_pkey" PRIMARY KEY ("xlsreport$mxstaticid", "xlsreport$mxcolumnid"),
    CONSTRAINT "uniq_xlsreport$mxstatic_mxcolumn_xlsreport$mxstaticid" UNIQUE ("xlsreport$mxstaticid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxstatic_mxobjectmember"
(
    "xlsreport$mxstaticid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxstatic_mxobjectmember_pkey" PRIMARY KEY ("xlsreport$mxstaticid", "mxmodelreflection$mxobjectmemberid"),
    CONSTRAINT "uniq_xlsreport$mxstatic_mxobjectmember_xlsreport$mxstaticid" UNIQUE ("xlsreport$mxstaticid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxtemplate"
(
    id bigint NOT NULL,
    templateid bigint,
    name character varying(200) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    documenttype character varying(4) COLLATE pg_catalog."default",
    csvseparator character varying(9) COLLATE pg_catalog."default",
    datetimepresentation character varying(12) COLLATE pg_catalog."default",
    customedateformat character varying(200) COLLATE pg_catalog."default",
    quotationcharacter character varying(1) COLLATE pg_catalog."default",
    createddate timestamp without time zone,
    changeddate timestamp without time zone,
    "system$changedby" bigint,
    "system$owner" bigint,
    CONSTRAINT "xlsreport$mxtemplate_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxtemplate_customexcel"
(
    "xlsreport$mxtemplateid" bigint NOT NULL,
    "xlsreport$customexcelid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxtemplate_customexcel_pkey" PRIMARY KEY ("xlsreport$mxtemplateid", "xlsreport$customexcelid"),
    CONSTRAINT "uniq_xlsreport$mxtemplate_customexcel_xlsreport$mxtemplateid" UNIQUE ("xlsreport$mxtemplateid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxtemplate_inputobject"
(
    "xlsreport$mxtemplateid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxtemplate_inputobject_pkey" PRIMARY KEY ("xlsreport$mxtemplateid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_xlsreport$mxtemplate_inputobject_xlsreport$mxtemplateid" UNIQUE ("xlsreport$mxtemplateid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxxpath"
(
    id bigint NOT NULL,
    retrievetype character varying(9) COLLATE pg_catalog."default",
    subvisible boolean,
    CONSTRAINT "xlsreport$mxxpath_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxxpath_mxdata"
(
    "xlsreport$mxxpathid" bigint NOT NULL,
    "xlsreport$mxdataid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxxpath_mxdata_pkey" PRIMARY KEY ("xlsreport$mxxpathid", "xlsreport$mxdataid"),
    CONSTRAINT "uniq_xlsreport$mxxpath_mxdata_xlsreport$mxdataid" UNIQUE ("xlsreport$mxdataid"),
    CONSTRAINT "uniq_xlsreport$mxxpath_mxdata_xlsreport$mxxpathid" UNIQUE ("xlsreport$mxxpathid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxxpath_mxobjectmember"
(
    "xlsreport$mxxpathid" bigint NOT NULL,
    "mxmodelreflection$mxobjectmemberid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxxpath_mxobjectmember_pkey" PRIMARY KEY ("xlsreport$mxxpathid", "mxmodelreflection$mxobjectmemberid"),
    CONSTRAINT "uniq_xlsreport$mxxpath_mxobjectmember_xlsreport$mxxpathid" UNIQUE ("xlsreport$mxxpathid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxxpath_mxobjectreference"
(
    "xlsreport$mxxpathid" bigint NOT NULL,
    "mxmodelreflection$mxobjectreferenceid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxxpath_mxobjectreference_pkey" PRIMARY KEY ("xlsreport$mxxpathid", "mxmodelreflection$mxobjectreferenceid"),
    CONSTRAINT "uniq_xlsreport$mxxpath_mxobjectreference_xlsreport$mxxpathid" UNIQUE ("xlsreport$mxxpathid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxxpath_mxobjecttype"
(
    "xlsreport$mxxpathid" bigint NOT NULL,
    "mxmodelreflection$mxobjecttypeid" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxxpath_mxobjecttype_pkey" PRIMARY KEY ("xlsreport$mxxpathid", "mxmodelreflection$mxobjecttypeid"),
    CONSTRAINT "uniq_xlsreport$mxxpath_mxobjecttype_xlsreport$mxxpathid" UNIQUE ("xlsreport$mxxpathid")
);

CREATE TABLE IF NOT EXISTS public."xlsreport$mxxpath_parentmxxpath"
(
    "xlsreport$mxxpathid1" bigint NOT NULL,
    "xlsreport$mxxpathid2" bigint NOT NULL,
    CONSTRAINT "xlsreport$mxxpath_parentmxxpath_pkey" PRIMARY KEY ("xlsreport$mxxpathid1", "xlsreport$mxxpathid2"),
    CONSTRAINT "uniq_xlsreport$mxxpath_parentmxxpath_xlsreport$mxxpathid1" UNIQUE ("xlsreport$mxxpathid1")
);
END;